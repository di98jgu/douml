  actionButton = new QPixmap((const char **) action_button);
  ActionIcon = new QPixmap((const char **) action_xpm);
  ActionMarkedIcon = new QPixmap((const char **) actionmarked_xpm);
  ActivityAcceptEventIcon = new QPixmap((const char **) activityacceptevent_xpm);
  ActivityAcceptEventMarkedIcon = new QPixmap((const char **) activityaccepteventmarked_xpm);
  ActivityAcceptTimeIcon = new QPixmap((const char **) activityaccepttime_xpm);
  ActivityAcceptTimeMarkedIcon = new QPixmap((const char **) activityaccepttimemarked_xpm);
  activityactionButton = new QPixmap((const char **) activityaction_button);
  ActivityActionIcon = new QPixmap((const char **) activityaction_xpm);
  ActivityActionMarkedIcon = new QPixmap((const char **) activityactionmarked_xpm);
  activityButton = new QPixmap((const char **) activity_button);
  ActivityDiagramIcon = new QPixmap((const char **) activitydiagram_xpm);
  ActivityIcon = new QPixmap((const char **) activity_xpm);
  ActivityObjectCanvas::read(char * & st, UmlCanvas * canvas, char * k)
    ActivityObjectDialog(ActivityObjectData * a, const char * what,
ActivityObjectDialog::ActivityObjectDialog(ActivityObjectData * d, const char * what,
  activitypartitionButton = new QPixmap((const char **) activitypartition_button);
  ActivityPartitionIcon = new QPixmap((const char **) activitypartition_xpm);
  ActivityPartitionMarkedIcon = new QPixmap((const char **) activitypartitionmarked_xpm);
  ActivitySendSignalIcon = new QPixmap((const char **) activitysendsignal_xpm);
  ActivitySendSignalMarkedIcon = new QPixmap((const char **) activitysendsignalmarked_xpm);
  actorButton = new QPixmap((const char **) actor_button);
  ActorIcon = new QPixmap((const char **) actor_xpm);
  aggregationButton = new QPixmap((const char **) aggregation_button);
  aggregationByValueButton = new QPixmap((const char **) aggregationbyvalue_button);
  anchorButton = new QPixmap((const char **) anchor_button);
	and reverse them one by one */
ArrowCanvas * ArrowCanvas::read(char * & st, UmlCanvas * canvas, char * k)
  artifactButton = new QPixmap((const char **) artifact_button);
  ArtifactIcon = new QPixmap((const char **) artifact_xpm);
    assign((const char *) s, s.length());
AssocContainCanvas * AssocContainCanvas::read(char * & st, UmlCanvas * canvas, char * k)
  associationButton = new QPixmap((const char **) association_button);
  asyncselfmsgButton = new QPixmap((const char **) asyncselfmsg_button);
			      (a_text) ? (const char *) 0
			     (a_text) ? (const char *) 0
			   (a_text) ? (const char *) 0
			  (a_text) ? (const char *) 0
  BlackPixmap = new QPixmap((const char **) black_xpm);
  BluePixmap = new QPixmap((const char **) blue_xpm);
	bn->set_key(index, (const char *) newk);
    body = body.mid(b2 - (const char *) body, e - b2);
      body = body.mid(b - (const char *) body, e - b);  
bool AcceptCallAction::tool_cmd(ToolCom *, const char * args) {
bool AcceptEventAction::tool_cmd(ToolCom *, const char * args) {
bool AccessVariableValueAction::tool_cmd(ToolCom * com, const char * args) {
bool ActivityActionData::tool_cmd(ToolCom * com, const char * args,
bool ActivityData::tool_cmd(ToolCom * com, const char * args,
bool ActivityObjectData::tool_cmd(ToolCom * com, const char * args,
bool ActivityPartitionData::tool_cmd(ToolCom * com, const char * args,
bool AnyAction::tool_cmd(ToolCom *, const char *) {
bool ArtifactData::tool_cmd(ToolCom * com, const char * args,
bool AttributeData::tool_cmd(ToolCom * com, const char * args,
bool BasicData::set_stereotype(const char * s) {
bool BasicData::tool_cmd(ToolCom * com, const char * args,
bool BrowserActivityAction::tool_cmd(ToolCom * com, const char * args) {
bool BrowserActivityDiagram::tool_cmd(ToolCom * com, const char * args) {
bool BrowserActivityNode::tool_cmd(ToolCom * com, const char * args) {
bool BrowserActivityObject::tool_cmd(ToolCom * com, const char * args) {
bool BrowserActivityPartition::tool_cmd(ToolCom * com, const char * args) {
bool BrowserActivity::tool_cmd(ToolCom * com, const char * args) {
bool BrowserArtifact::tool_cmd(ToolCom * com, const char * args) {
bool BrowserAttribute::tool_cmd(ToolCom * com, const char * args) {
bool BrowserClassDiagram::tool_cmd(ToolCom * com, const char * args) {
bool BrowserClassInstance::tool_cmd(ToolCom * com, const char * args) {
bool BrowserClass::tool_cmd(ToolCom * com, const char * args) {
bool BrowserClass::tool_global_cmd(ToolCom * com, const char * args)
bool BrowserClassView::tool_cmd(ToolCom * com, const char * args) {
bool BrowserColDiagram::tool_cmd(ToolCom * com, const char * args) {
bool BrowserComponentDiagram::tool_cmd(ToolCom * com, const char * args) {
bool BrowserComponent::tool_cmd(ToolCom * com, const char * args) {
bool BrowserComponentView::tool_cmd(ToolCom * com, const char * args) {
bool BrowserDeploymentDiagram::tool_cmd(ToolCom * com, const char * args) {
bool BrowserDeploymentNode::tool_cmd(ToolCom * com, const char * args) {
bool BrowserDeploymentView::tool_cmd(ToolCom * com, const char * args) {
bool BrowserExpansionNode::tool_cmd(ToolCom * com, const char * args) {
bool BrowserExpansionRegion::tool_cmd(ToolCom * com, const char * args) {
bool BrowserExtraMember::tool_cmd(ToolCom * com, const char * args) {
bool BrowserFlow::tool_cmd(ToolCom * com, const char * args) {
bool BrowserInterruptibleActivityRegion::tool_cmd(ToolCom * com, const char * args) {
bool BrowserNode::tool_cmd(ToolCom * com, const char * args) {
bool BrowserObjectDiagram::tool_cmd(ToolCom * com, const char * args) {
bool BrowserOperation::tool_cmd(ToolCom * com, const char * args) {
bool BrowserPackage::read_stereotypes(const char * f)
bool BrowserPackage::tool_cmd(ToolCom * com, const char * args) {
bool BrowserPackage::tool_global_cmd(ToolCom * com, const char * args)
bool BrowserParameterSet::tool_cmd(ToolCom * com, const char * args) {
bool BrowserParameter::tool_cmd(ToolCom * com, const char * args) {
bool BrowserPin::tool_cmd(ToolCom * com, const char * args) {
bool BrowserPseudoState::tool_cmd(ToolCom * com, const char * args) {
bool BrowserRegion::tool_cmd(ToolCom * com, const char * args) {
bool BrowserRelation::tool_cmd(ToolCom * com, const char * args) {
bool BrowserSeqDiagram::tool_cmd(ToolCom * com, const char * args) {
bool BrowserSimpleRelation::tool_cmd(ToolCom * com, const char * args) {
bool BrowserStateAction::tool_cmd(ToolCom * com, const char * args) {
bool BrowserStateDiagram::tool_cmd(ToolCom * com, const char * args) {
bool BrowserState::tool_cmd(ToolCom * com, const char * args) {
bool BrowserTransition::tool_cmd(ToolCom * com, const char * args) {
bool BrowserUseCaseDiagram::tool_cmd(ToolCom * com, const char * args) {
bool BrowserUseCase::tool_cmd(ToolCom * com, const char * args) {
bool BrowserUseCaseView::tool_cmd(ToolCom * com, const char * args) {
bool CallBehaviorAction::tool_cmd(ToolCom * com, const char * args) {
bool CallOperationAction::tool_cmd(ToolCom * com, const char * args) {
    bool change_rel(ToolCom * com, const char * args, bool add);
bool ChangeVariableValueAction::tool_cmd(ToolCom * com, const char * args) {
bool ClassData::tool_cmd(ToolCom * com, const char * args,
bool ClassInstanceData::change_rel(ToolCom * com, const char * args,
bool ClassInstanceData::tool_cmd(ToolCom * com, const char * args,
bool ColMsg::gt(const char * h1, const char * h2)
bool ColMsg::lt(const char * h1, const char * h2)
bool ComponentData::tool_cmd(ToolCom * com, const char * args,
bool CppSettings::set_AttributeDecl(const char * multiplicity, Q3CString v)
bool CppSettings::set_RelationDecl(bool by_value, const char * multiplicity, const char * v)
bool CreateObjectAction::tool_cmd(ToolCom *, const char * args) {
bool DestroyObjectAction::tool_cmd(ToolCom *, const char * args) {
bool DiagramView::save_in(const char * f, bool optimal, bool temporary) {
bool DiagramView::save_pict(const char * f, bool optimal, bool temporary) {
bool DiagramView::svg_save_in(const char * f, bool optimal, bool temporary) {
			      bool dobackup, char * modified_bodies,
bool ExpansionRegionData::tool_cmd(ToolCom * com, const char * args,
bool ExtraMemberData::tool_cmd(ToolCom * com, const char * args,
bool FlowData::tool_cmd(ToolCom * com, const char * args,
bool GenerationSettings::tool_global_uml_cmd(ToolCom * com, const char * args)
    bool get_bool(const char *& p);
    bool get_direction(UmlParamDirection & v, const char *& p);
    bool get_extended_visibility(UmlVisibility & v, const char *& p);
    bool get_relation_kind(UmlCode & v, const char *& p);
    bool get_value(const char * key, QString & value);
    bool get_visibility(UmlVisibility & v, const char *& p);
bool IdlSettings::set_AttributeDecl(const char * multiplicity, Q3CString v)
bool IdlSettings::set_ConstDecl(const char * multiplicity, Q3CString v)
bool IdlSettings::set_RelationDecl(const char * multiplicity, Q3CString v)
bool IdlSettings::set_UnionItemDecl(const char * multiplicity, Q3CString v)
bool IdlSettings::set_UnionRelationDecl(const char * multiplicity, Q3CString v)
bool IdlSettings::set_ValuetypeAttributeDecl(const char * multiplicity, Q3CString v)
bool IdlSettings::set_ValuetypeRelationDecl(const char * multiplicity, Q3CString v)
			       BooL & indent_needed, const char * p);
			   bool inlinep, const char * if_def,
		 bool inlinep, const char * if_def, const char * end_if);
    bool insert_template(const char *& p, QTextStream & fs,
bool insert_template(const QString & tm, const char *& p, 
    bool isEmpty() const { return *p == 0; };
bool is_referenced(const char * s, int id, const char * kc, const char * kr)
bool JavaSettings::set_AttributeDecl(const char * multiplicity, Q3CString v)
bool JavaSettings::set_RelationDecl(const char * multiplicity, Q3CString v)
bool KeyValuesTable::get_value(const char * key, QString & value) {
bool Lex::identifierp(const char * s)
bool Lex::identifierp(const char * s, bool strictp)
bool Lex::star(const char * s)
    bool manage_comment(const char *& p, const char *& pp, bool javadoc);
bool manage_comment(QString comment, const char *& p,
    bool manage_description(const char *& p, const char *& pp);    
bool manage_description(QString comment, const char *& p, const char *& pp)
bool manage_python_comment(QString comment, const char *& p,
bool manage_python_description(QString comment, const char *& p, const char *& pp)
bool need_equal(const char * p, const char * v)
bool need_equal(const char * p, const char * v, bool cpp)
bool need_equal(const char * p, QString v, bool cpp)
bool ObjectData::tool_cmd(ToolCom * com, const char * args) {
bool OpaqueAction::tool_cmd(ToolCom *, const char * args) {
bool OperationData::tool_cmd(ToolCom * com, const char * args,
bool operator==(const char * s1, const MyStr & s2);
bool operator==(const char * s1, const MyStr & s2)
bool operator!=(const char * s1, const MyStr & s2);
bool operator!=(const char * s1, const MyStr & s2)
bool operator==(const char * s1, const SharedStr & s2);
bool operator==(const char * s1, const SharedStr & s2)
bool operator!=(const char * s1, const SharedStr & s2);
bool operator!=(const char * s1, const SharedStr & s2)
bool operator==(const MyStr & s1, const char * s2);
bool operator==(const MyStr & s1, const char * s2)
bool operator!=(const MyStr & s1, const char * s2);
bool operator!=(const MyStr & s1, const char * s2)
bool operator==(const SharedStr & s1, const char * s2);
bool operator==(const SharedStr & s1, const char * s2)
bool operator!=(const SharedStr & s1, const char * s2);
bool operator!=(const SharedStr & s1, const char * s2)
bool PackageData::tool_cmd(ToolCom * com, const char * args,
bool ParameterData::tool_cmd(ToolCom * com, const char * args,
bool ParameterSetData::tool_cmd(ToolCom * com, const char * args,
bool PinData::tool_cmd(ToolCom * com, const char * args,
bool PinParamData::tool_cmd(ToolCom * com, const char * args, BooL & ack) {
bool PseudoStateData::tool_cmd(ToolCom * com, const char * args,
bool PythonSettings::set_AttributeDecl(const char * multiplicity, Q3CString v)
bool PythonSettings::set_IndentStep(const char * v)
bool PythonSettings::set_RelationDecl(bool composition, const char * multiplicity, Q3CString v)
bool ReduceAction::tool_cmd(ToolCom * com, const char * args) {
bool RelationData::set_stereotype(const char * s) {
bool ReplyAction::tool_cmd(ToolCom *, const char * args) {
  bool result = ((const char *) stereotype != s);
    bool save_in(const char * f, bool optimal, bool temporary);
    bool save_pict(const char * f, bool optimal, bool temporary);
bool SendSignalAction::tool_cmd(ToolCom *, const char * args) {
    bool set_Activity(const char * s);
    bool set_AttributeValue(UmlAttribute * attribute, const char * value);
    bool set_Behavior(const char * v);
    bool set_Classifier(const char * v);
    bool set_Constraint(const char * v);
    bool set_CppActivity(const char * s);
    bool set_CppBehavior(const char * v);
    bool set_CppBody(const char * s);
    bool set_CppDecl(const char * s);
    bool set_CppDef(const char * s);
    bool set_CppDoActivity(const char * s);
    bool set_CppEntryBehavior(const char * s);
    bool set_CppExitBehavior(const char * s);
    bool set_CppExpression(const char * s);
    bool set_CppGuard(const char * s);
    bool set_CppGuard(const char * v);
    bool set_CppNameSpec(const char * s);
    bool set_CppPostCondition(const char * v);
    bool set_CppPreCondition(const char * v);
    bool set_CppReplyToCall(const char * v);
    bool set_CppSelection(const char * v);
    bool set_CppSignal(const char * v);
    bool set_CppTransformation(const char * v);
    bool set_CppTrigger(const char * s);
    bool set_CppTrigger(const char * v);
    bool set_CppValue(const char * v);
    bool set_CppWeight(const char * v);
    bool set_DefaultValue(const char * s);
    bool set_DefaultValue(const char * v);
    bool set_DoActivity(const char * s);
    bool set_EntryBehavior(const char * s);
    bool set_ExitBehavior(const char * s);
    bool set_Expression(const char * s);
    bool set_ExtensionPoints(const char * v);
    bool set_Guard(const char * s);
    bool set_Guard(const char * v);
    bool set_IdlCase(const char * s);
    bool set_IdlDecl(const char * s);
    bool set_IdlNameSpec(const char * s);
    bool set_InState(const char * v);
    bool set_it_(Q3CString & r, const char * v, OnInstanceCmd cmd);
    bool set_JavaActivity(const char * s);
    bool set_JavaAnnotations(const char * v);
    bool set_JavaBehavior(const char * v);
    bool set_JavaBody(const char * s);
    bool set_JavaDecl(const char * s);
    bool set_JavaDef(const char * s);
    bool set_JavaDoActivity(const char * s);
    bool set_JavaEntryBehavior(const char * s);
    bool set_JavaExitBehavior(const char * s);
    bool set_JavaExpression(const char * s);
    bool set_JavaGuard(const char * s);
    bool set_JavaGuard(const char * v);
    bool set_JavaNameSpec(const char * s);
    bool set_JavaPostCondition(const char * v);
    bool set_JavaPreCondition(const char * v);
    bool set_JavaReplyToCall(const char * v);
    bool set_JavaSelection(const char * v);
    bool set_JavaSignal(const char * v);
    bool set_JavaTransformation(const char * v);
    bool set_JavaTrigger(const char * s);
    bool set_JavaTrigger(const char * v);
    bool set_JavaValue(const char * v);
    bool set_JavaWeight(const char * v);
    bool set_Multiplicity(const char * s);
    bool set_Multiplicity(const char * v);
    bool set_PhpBody(const char * s);
    bool set_PhpDecl(const char * s);
    bool set_PhpDef(const char * s);
    bool set_PhpNameSpec(const char * s);
    bool set_PostCondition(const char * v);
    bool set_PreCondition(const char * v);
    bool set_PythonBody(const char * s);
    bool set_PythonDecl(const char * s);
    bool set_PythonDecorators(const char * s);
    bool set_PythonDef(const char * s);
    bool set_PythonNameSpec(const char * s);
    bool set_ReplyToCall(const char * v);
    bool set_RoleName(const char * s);
    bool set_Selection(const char * v);
    bool set_Signal(const char * v);
    bool set_Transformation(const char * v);
    bool set_Trigger(const char * s);
    bool set_Trigger(const char * v);
    bool set_Value(const char * v);
    bool set_Weight(const char * v);
bool start_svg(const char * f, int w, int h)
bool StateActionData::tool_cmd(ToolCom * com, const char * args,
bool StateData::tool_cmd(ToolCom * com, const char * args,
    bool svg_save_in(const char * f, bool optimal, bool temporary);
    bool tool_cmd(ToolCom * com, BrowserRelation * rel, const char * args);
    bool tool_cmd(ToolCom * com, const char * args,
  bool tool_cmd(ToolCom * com, const char * args);
  bool tool_cmd(ToolCom * com, const char * args, BooL & ack);
bool ToolCom::get_bool(const char *& p)
bool ToolCom::get_direction(UmlParamDirection & v, const char *& p)
bool ToolCom::get_extended_visibility(UmlVisibility & v, const char *& p)
bool ToolCom::get_relation_kind(UmlCode & v, const char *& p)
bool ToolCom::get_visibility(UmlVisibility & v, const char *& p)
bool Tool::read(const char * f)
bool TransitionData::tool_cmd(ToolCom * com, const char * args,
bool UmlArtifact::must_be_saved(const char * path, const char * new_contains)
bool UmlBaseAcceptCallAction::set_CppTrigger(const char * v) {
bool UmlBaseAcceptCallAction::set_JavaTrigger(const char * v) {
bool UmlBaseAcceptCallAction::set_Trigger(const char * v) {
bool UmlBaseAcceptEventAction::set_CppTrigger(const char * v) {
bool UmlBaseAcceptEventAction::set_JavaTrigger(const char * v) {
bool UmlBaseAcceptEventAction::set_Trigger(const char * v) {
bool UmlBaseActivityAction::set_CppPostCondition(const char * v) {
bool UmlBaseActivityAction::set_CppPreCondition(const char * v) {
bool UmlBaseActivityAction::set_JavaPostCondition(const char * v) {
bool UmlBaseActivityAction::set_JavaPreCondition(const char * v) {
bool UmlBaseActivityAction::set_PostCondition(const char * v) {
bool UmlBaseActivityAction::set_PreCondition(const char * v) {
bool UmlBaseActivityObject::set_CppSelection(const char * v) {
bool UmlBaseActivityObject::set_InState(const char * v) {
bool UmlBaseActivityObject::set_JavaSelection(const char * v) {
bool UmlBaseActivityObject::set_Multiplicity(const char * v) {
bool UmlBaseActivityObject::set_Selection(const char * v) {
bool UmlBaseActivityParameter::set_DefaultValue(const char * v) {
bool UmlBaseActivity::set_CppPostCondition(const char * v) {
bool UmlBaseActivity::set_CppPreCondition(const char * v) {
bool UmlBaseActivity::set_JavaPostCondition(const char * v) {
bool UmlBaseActivity::set_JavaPreCondition(const char * v) {
bool UmlBaseActivity::set_PostCondition(const char * v) {
bool UmlBaseActivity::set_PreCondition(const char * v) {
bool UmlBaseAttribute::set_DefaultValue(const char * s) {
bool UmlBaseAttribute::set_IdlCase(const char * s) {
bool UmlBaseAttribute::set_Multiplicity(const char * s) {
bool UmlBaseClassInstance::set_AttributeValue(UmlAttribute * attribute, const char * value) {
bool UmlBaseClassItem::set_CppDecl(const char * s) {
bool UmlBaseClassItem::set_IdlDecl(const char * s) {
bool UmlBaseClassItem::set_JavaDecl(const char * s) {
bool UmlBaseClassItem::set_PhpDecl(const char * s) {
bool UmlBaseClassItem::set_PythonDecl(const char * s) {
bool UmlBaseClassMember::set_Constraint(const char * v) {
bool UmlBaseClassMember::set_JavaAnnotations(const char * v) {
bool UmlBaseCreateObjectAction::set_Classifier(const char * v) {
bool UmlBaseExtraClassMember::set_CppDef(const char * s) {
bool UmlBaseFlow::set_CppGuard(const char * v) {
bool UmlBaseFlow::set_CppSelection(const char * v) {
bool UmlBaseFlow::set_CppTransformation(const char * v) {
bool UmlBaseFlow::set_CppWeight(const char * v) {
bool UmlBaseFlow::set_Guard(const char * v) {
bool UmlBaseFlow::set_JavaGuard(const char * v) {
bool UmlBaseFlow::set_JavaSelection(const char * v) {
bool UmlBaseFlow::set_JavaTransformation(const char * v) {
bool UmlBaseFlow::set_JavaWeight(const char * v) {
bool UmlBaseFlow::set_Selection(const char * v) {
bool UmlBaseFlow::set_Transformation(const char * v) {
bool UmlBaseFlow::set_Weight(const char * v) {
bool UmlBaseItem::set_it_(Q3CString & r, const char * v, OnInstanceCmd cmd) {
bool UmlBaseOnSignalAction::set_CppSignal(const char * v) {
bool UmlBaseOnSignalAction::set_JavaSignal(const char * v) {
bool UmlBaseOnSignalAction::set_Signal(const char * v) {
bool UmlBaseOpaqueAction::set_Behavior(const char * v) {
bool UmlBaseOpaqueAction::set_CppBehavior(const char * v) {
bool UmlBaseOpaqueAction::set_JavaBehavior(const char * v) {
bool UmlBaseOperation::set_CppBody(const char * s) {
bool UmlBaseOperation::set_CppDef(const char * s) {
bool UmlBaseOperation::set_CppNameSpec(const char * s) {
bool UmlBaseOperation::set_IdlNameSpec(const char * s) {
bool UmlBaseOperation::set_JavaBody(const char * s) {
bool UmlBaseOperation::set_JavaDef(const char * s) {
bool UmlBaseOperation::set_JavaNameSpec(const char * s) {
bool UmlBaseOperation::set_PhpBody(const char * s) {
bool UmlBaseOperation::set_PhpDef(const char * s) {
bool UmlBaseOperation::set_PhpNameSpec(const char * s) {
bool UmlBaseOperation::set_PythonBody(const char * s) {
bool UmlBaseOperation::set_PythonDecorators(const char * s) {
bool UmlBaseOperation::set_PythonDef(const char * s) {
bool UmlBaseOperation::set_PythonNameSpec(const char * s) {
bool UmlBaseRelation::set_DefaultValue(const char * s) {
bool UmlBaseRelation::set_IdlCase(const char * s) {
bool UmlBaseRelation::set_Multiplicity(const char * s) {
bool UmlBaseRelation::set_RoleName(const char * s) {
bool UmlBaseReplyAction::set_CppReplyToCall(const char * v) {
bool UmlBaseReplyAction::set_JavaReplyToCall(const char * v) {
bool UmlBaseReplyAction::set_ReplyToCall(const char * v) {
bool UmlBaseStateAction::set_CppExpression(const char * s) {
bool UmlBaseStateAction::set_Expression(const char * s) {
bool UmlBaseStateAction::set_JavaExpression(const char * s) {
bool UmlBaseState::set_CppDoActivity(const char * s) {
bool UmlBaseState::set_CppEntryBehavior(const char * s) {
bool UmlBaseState::set_CppExitBehavior(const char * s) {
bool UmlBaseState::set_DoActivity(const char * s) {
bool UmlBaseState::set_EntryBehavior(const char * s) {
bool UmlBaseState::set_ExitBehavior(const char * s) {
bool UmlBaseState::set_JavaDoActivity(const char * s) {
bool UmlBaseState::set_JavaEntryBehavior(const char * s) {
bool UmlBaseState::set_JavaExitBehavior(const char * s) {
bool UmlBaseTransition::set_Activity(const char * s) {
bool UmlBaseTransition::set_CppActivity(const char * s) {
bool UmlBaseTransition::set_CppGuard(const char * s) {
bool UmlBaseTransition::set_CppTrigger(const char * s) {
bool UmlBaseTransition::set_Guard(const char * s) {
bool UmlBaseTransition::set_JavaActivity(const char * s) {
bool UmlBaseTransition::set_JavaGuard(const char * s) {
bool UmlBaseTransition::set_JavaTrigger(const char * s) {
bool UmlBaseTransition::set_Trigger(const char * s) {
bool UmlBaseUseCase::set_ExtensionPoints(const char * v) {
bool UmlBaseValueSpecificationAction::set_CppValue(const char * v) {
bool UmlBaseValueSpecificationAction::set_JavaValue(const char * v) {
bool UmlBaseValueSpecificationAction::set_Value(const char * v) {
bool UmlClassMember::insert_template(const char *& p, QTextStream & fs,
bool UmlItem::manage_comment(const char *& p, const char *& pp,
bool UmlItem::manage_description(const char *& p, const char *& pp) {
    bool (UmlOperation::*set_body)(const char * s);
bool UseCaseData::tool_cmd(ToolCom * com, const char * args,
bool ValueSpecificationAction::tool_cmd(ToolCom *, const char * args) {
      br_diagram(br_diag), view(0), all_items((const char *) 0) {
BrowserActivityAction * BrowserActivityAction::read(char * & st, char * k,
BrowserActivity * BrowserActivity::read(char * & st, char * k,
BrowserActivityDiagram * BrowserActivityDiagram::read(char * & st, char * k,
BrowserActivityDiagram * BrowserActivityDiagram::read_ref(char * & st, char * k)
BrowserActivityNode * BrowserActivityNode::read(char * & st, char * k,
BrowserActivityObject * BrowserActivityObject::read(char * & st, char * k,
  BrowserActivityPartition::read(char * & st, char * k,
BrowserArtifact * BrowserArtifact::find(const char * s)
BrowserArtifact * BrowserArtifact::read(char * & st, char * k, 
BrowserArtifact * BrowserArtifact::read_ref(char * & st, const char * k)
BrowserAttribute * BrowserAttribute::read(char * & st, char * k,
BrowserClass * BrowserClass::find(const char * s)
BrowserClass * BrowserClass::read(char * & st, char * k,
BrowserClass * BrowserClass::read_ref(char * & st, const char * k)
BrowserClassDiagram * BrowserClassDiagram::read(char * & st, char * k,
BrowserClassDiagram * BrowserClassDiagram::read_ref(char * & st, const char * k)
BrowserClassInstance * BrowserClassInstance::read(char * & st, char * k, 
BrowserClassView * BrowserClassView::read(char * & st, char * k,
BrowserColDiagram * BrowserColDiagram::read(char * & st, char * k,
BrowserComponent * BrowserComponent::read(char * & st, char * k, 
BrowserComponent * BrowserComponent::read_ref(char * & st, const char * k)
BrowserComponentDiagram * BrowserComponentDiagram::read_ref(char * & st, char * k)
  BrowserComponentDiagram::read(char * & st, char * k,
BrowserComponentView * BrowserComponentView::read(char * & st, char * k,
BrowserComponentView * BrowserComponentView::read_ref(char * & st, char * k)
BrowserDeploymentDiagram * BrowserDeploymentDiagram::read_ref(char * & st, const char * k)
  BrowserDeploymentDiagram::read(char * & st, char * k,
BrowserDeploymentNode * BrowserDeploymentNode::read(char * & st, char * k, 
BrowserDeploymentView * BrowserDeploymentView::read(char * & st, char * k,
BrowserDeploymentView * BrowserDeploymentView::read_ref(char * & st, const char * k)
  BrowserExpansionNode::read(char * & st, char * k,
BrowserExpansionRegion * BrowserExpansionRegion::read(char * & st, char * k,
BrowserExtraMember * BrowserExtraMember::read(char * & st, char * k,
BrowserFlow * BrowserFlow::read(char * & st, char * k, BrowserNode * parent)
  BrowserInterruptibleActivityRegion::read(char * & st, char * k,
BrowserNode * AccessVariableValueAction::referenced(const char *& s) const {
    BrowserNode * add_parameter_set(BrowserParameterSet *, const char *);
BrowserNode * AnyAction::referenced(const char *&) const {
BrowserNode * BrowserActivityAction::get_it(const char * k, int id)
BrowserNode * BrowserActivityDiagram::get_it(const char * k, int id)
BrowserNode * BrowserActivity::get_it(const char * k, int id)
BrowserNode * BrowserActivityNode::get_it(const char * k, int id)
BrowserNode * BrowserActivityObject::get_it(const char * k, int id)
BrowserNode * BrowserActivityPartition::get_it(const char * k, int id)
BrowserNode * BrowserActivity::read_any_ref(char * & st, char * k) {
BrowserNode * BrowserArtifact::get_it(const char * k, int id)
BrowserNode * BrowserAttribute::get_it(const char * k, int id)
BrowserNode * BrowserClassDiagram::get_it(const char * k, int id)
BrowserNode * BrowserClass::get_it(const char * k, int id)
BrowserNode * BrowserClassInstance::get_it(const char * k, int id)
BrowserNode * BrowserClass::read_any_ref(char * & st, char * k) {
BrowserNode * BrowserClassView::get_it(const char * k, int id)
BrowserNode * BrowserColDiagram::get_it(const char * k, int id)
BrowserNode * BrowserComponentDiagram::get_it(const char * k, int id)
BrowserNode * BrowserComponent::get_it(const char * k, int id)
BrowserNode * BrowserComponentView::get_it(const char * k, int id)
BrowserNode * BrowserDeploymentDiagram::get_it(const char * k, int id)
BrowserNode * BrowserDeploymentNode::get_it(const char * k, int id)
BrowserNode * BrowserDeploymentView::get_it(const char * k, int id)
BrowserNode * BrowserDiagram::read_any_ref(char * & st, char * k) {
BrowserNode * BrowserExpansionNode::get_it(const char * k, int id)
BrowserNode * BrowserExpansionRegion::get_it(const char * k, int id)
BrowserNode * BrowserExtraMember::get_it(const char * k, int id)
BrowserNode * BrowserFlow::get_it(const char * k, int id)
BrowserNode * BrowserInterruptibleActivityRegion::get_it(const char * k, int id)
BrowserNode::BrowserNode(BrowserNode * parent, const char * n)
BrowserNode::BrowserNode(BrowserNode * parent, const char * n)
BrowserNode::BrowserNode(BrowserView * parent, const char * n)
    BrowserNode(BrowserNode * parent, const char * n);
BrowserNode * BrowserNode::read_any_ref(char * & st, char * k) {
BrowserNode * BrowserObjectDiagram::get_it(const char * k, int id)
BrowserNode * BrowserOperation::get_it(const char * k, int id)
BrowserNode * BrowserPackage::get_it(const char * k, int id)
BrowserNode * BrowserParameter::get_it(const char * k, int id)
BrowserNode * BrowserParameterSet::get_it(const char * k, int id)
BrowserNode * BrowserPin::get_it(const char * k, int id)
BrowserNode * BrowserPseudoState::get_it(const char * k, int id)
BrowserNode * BrowserRegion::get_it(const char * k, int id)
BrowserNode * BrowserRelation::get_it(const char * k, int id)
BrowserNode * BrowserSeqDiagram::get_it(const char * k, int id)
BrowserNode * BrowserSimpleRelation::get_it(const char * k, int id)
BrowserNode * BrowserStateAction::get_it(const char * k, int id)
BrowserNode * BrowserStateDiagram::get_it(const char * k, int id)
BrowserNode * BrowserState::get_it(const char * k, int id)
BrowserNode * BrowserState::read_any_ref(char * & st, char * k) {
BrowserNode * BrowserTransition::get_it(const char * k, int id)
BrowserNode * BrowserUseCaseDiagram::get_it(const char * k, int id)
BrowserNode * BrowserUseCase::get_it(const char * k, int id)
BrowserNode * BrowserUseCaseView::get_it(const char * k, int id)
    BrowserNode(BrowserView * parent, const char * n);
BrowserNode * CallBehaviorAction::referenced(const char *& s) const {
BrowserNode * CallOperationAction::referenced(const char *& s) const {
BrowserNodeList & BrowserArtifact::instances(BrowserNodeList & result, const char * st) {
BrowserNode * ReduceAction::referenced(const char *& s) const {
BrowserObjectDiagram * BrowserObjectDiagram::read(char * & st, char * k,
BrowserObjectDiagram * BrowserObjectDiagram::read_ref(char * & st, char * k)
BrowserOperation * BrowserOperation::read(char * & st, char * k,
BrowserPackage * BrowserPackage::read(char * & st, char * k,
  BrowserPackage::find_it(const char * s,
    BrowserPackage * find_it(const char * s, const MyStr & (PackageData::* pf)() const);
BrowserParameter * BrowserParameter::read(char * & st, char * k,
BrowserParameterSet * BrowserParameterSet::new_one(const char * s,
BrowserParameterSet * BrowserParameterSet::read(char * & st, char * k,
BrowserPin * BrowserPin::read(char * & st, char * k, BrowserNode * parent)
BrowserPseudoState * BrowserPseudoState::read(char * & st, char * k,
BrowserRegion * BrowserRegion::read(char * & st, char * k,
BrowserRelation * BrowserRelation::read(char * & st, char * k,
BrowserRelation * BrowserRelation::read_ref(char * & st, char * k)
BrowserSeqDiagram * BrowserSeqDiagram::read(char * & st, char * k,
  BrowserSimpleRelation::read(char * & st, char * k,
BrowserStateAction * BrowserStateAction::read(char * & st, char * k,
BrowserState * BrowserState::read(char * & st, char * k,
BrowserStateDiagram * BrowserStateDiagram::read(char * & st, char * k,
BrowserStateDiagram * BrowserStateDiagram::read_ref(char * & st, char * k)
  BrowserTransition::read(char * & st, char * k,
BrowserUseCase * BrowserUseCase::read(char * & st, char * k,
BrowserUseCaseDiagram * BrowserUseCaseDiagram::read(char * & st, char * k,
BrowserUseCaseDiagram * BrowserUseCaseDiagram::read_ref(char * & st, const char * k)
BrowserUseCaseView * BrowserUseCaseView::read(char * & st, char * k,
Builtin & GenerationSettings::get_type(const char * u)
CanvasFormat canvas_format(const char * s)
	       "                   (caseSensitive) ? \"y\" : \"n\", (const char *) s);\n"
	      ChangeVariableValueAction *, const char * flg_name, 
      char * argv = 0;
	char * argv = 0;
    char * assign(const char *, bool share);
    char * assign(const char *, int len);
    char * assign(const char * s, int len, bool share);
    char * assign(const Q3CString &, bool share);
    char * assign(const QString &, bool share);
    char * b;
  char * b;
    char * b2;
    char * b = art->get_body('c');
	  char * b = get_body('c');
	  char * b = get_body('j');
	  char * b = get_body('p');
	  char * b = get_body('y');
      char * b = new char[len];
      char * body;
	char * body = get_body('c');
	char * body = get_body('j');
	char * body = get_body('p');
	char * body = get_body('y');
    char * b = oper->get_body('c');
    char * b = oper->get_body('j');
    char * b = oper->get_body('p');
    char * b = oper->get_body('y');
      char * buffer;
    char * buffer_in;
    char * buffer_out;
  char * buff = read_file(dir, filename, ro);
      char c = ((const char *) value)[value.length() - 1];
    char * cmd;
					      char const * kc,
						     char const * kc,
						    char const * kc,
						   char const * kc,
						  char const * kc,
						 char const * kc,
						char const * kc,
					      char const * kr)
						     char const * kr)
						    char const * kr)
						   char const * kr)
						  char const * kr)
						 char const * kr)
						char const * kr)
  char * cpp;
  char * d;
    char * diagram;
  char * diagram_def = 
    char * d = read_string(st);
  char * fn = new char[len + 1];
    char * get_body(int who);
  char * java;
      char * k;
    char * k;
  char * k;
			    char * k)
				      char * k)
				    char * k)
					      char * k)
					    char * & k)
					  char * k)
						  char * k)
								char * k)
						char * k)
					char * k)
				char * k)
	char * k;
		  			      char * k, ActivityActionCanvas * a) {
			    char * k, ActivityActionCanvas * a) {
					char * k, ActivityCanvas * a) {
					  char * k, CdClassCanvas * cl)
				   char * k, DiagramItem * it)
			      char * k, DiagramItem * who)
					char * k, ExpansionRegionCanvas * a) {
    char * key = ((pclosed - p) > 255) ? new char[pclosed - p - 1] : st;
					  char * k, FragmentCanvas * f);
				char * k, FragmentCanvas * f)
      char * k = read_keyword(st);
    char * k = read_keyword(st);
  char * k = read_keyword(st);
	char * k = read_keyword(st);
  char * k = read_token(p);
char * Lex::_buffer;
      char * mark;
char * MayBeSharedStr::assign(const char * s, bool share) {
char * MayBeSharedStr::assign(const char * s, int len, bool share) {
char * MayBeSharedStr::assign(const Q3CString & s, bool share) {
char * MayBeSharedStr::assign(const QString & s, bool share) {
    char * modified_bodies = (def->get_bodies_modified())
		   char * modified_bodies, int who);
  char * name = new char[len + 1];
        char * newbuff = new char[buffer_out_size];
    char * newbuff = new char[buffer_out_size];
  char * n = new char[len + 1];
      char * old = read_file(QString::number(cl->get_ident()) + ".bodies");
char * OperationData::get_body(int who) {
char * OperationData::set_bodies_info(BrowserClass * cl, int id)
    char * p;
  char * p1 = context.pointer - 1;	// '@' was read
    char * p1 = s;
  char * p1 = strchr(context.buffer, '\r');
    char * p2;
	char * p2;
    char * p2 = context.pointer;
    char * p2 = p1 + 1;
  char * package;
  char * path = new char[len + 1];
  char * p = buff;
  char * p = buffer_in;
    char * p_buffer_out;
  char * p = _context.pointer;
  char * p = context.pointer;
  char * p = _context.pointer;	// start of the comment on the line
  char * p = context.pointer;	// start of the comment on the line
  char * php;
      char * pointer;
    char * pointer;
  char * pointer = _context.pointer;
  char * pointer = context.pointer;
  char * p = r;
	char * p = r;
    char * p = read_file(dir, filename, dummy);
  char * previous_word;	// Q[C]String too expensive
      char * p = strchr(l, '=');
	  char * p = strstr(l+3, "=\"");
  char * p = strstr(s, "\n!!!");
  char * python;
  char * r;
char * read_definition(int id, const char * ext)
char * read_definition(int id, const char * ext, int offset, int len);
char * read_definition(int id, const char * ext, int offset, int len)
char * read_file(QDir & dir, QString fn, BooL & ro);
char * read_file(QDir & dir, QString fn, BooL & ro);
char * read_file(QDir & dir, QString fn, BooL & ro)
char * read_file(QString filename)
char * read_file(QString filename, int offset, int len)
char * read_keyword(char * & st)
char * read_keyword(char * & st, const char * expected)
char * read_keyword(char * & st, const char * expected1,
char * read_string(char *&);
char * read_string(char *&);
char * read_string(char * & st)
char * read_token(char *&);
char * read_token(char *&);
char * read_token(char * & st)
    char * read_word_pointer;
  char * r = st;
  char * r = st + 1;
  char * s;
char * SharedStr::assign(const char * s, int len) {
char * skip_until(char * & st, const char * expected)
  char * s = new char[clipboard.length() + 1];
    char * s = new char[len + 1];
        char * s = new char[size + 1];
    char * s = new char[size + 1];
   char * s = new char[size + 1];
    char * s = new char[sz + 1];
  char * s = read_file((f == 0) ? "stereotypes" : f);
    char * s = read_file((f == 0) ? "tools" : f);
  char * s = read_file(filename);
      char * s = read_file(fn);
    char * s = read_file(fn);
  char * s = read_file("generation_settings");
  char * s = read_file(path);
  char * s = read_file(QString::number(id) + ".bodies");
  char * s = read_file("tools");
	char * s = read_string(p);
  char * s = set_bodies_info(cl, cl->get_ident());
  char * s = set_bodies_info(cl, id);
  char * ss = strchr(p + index, c);
  char * ss = strstr(p + index, s);
  char * start = 0;
		      char * & st, char * & k,
                char * st = s;
      char * st = s;
    char * st = s;
	char * st = s;
char * UmlCom::buffer_in;
char * UmlCom::buffer_in_end;
char * UmlCom::buffer_out;
char * UmlCom::p_buffer_in;
char * UmlCom::p_buffer_out;
  char * v = getenv("BOUML_ID");	// yes !
	(child->text(0) == (const char *) name)) {
  choiceBigPixmap = new QPixmap((const char **) choice_big_pixmap);
  choiceButton = new QPixmap((const char **) choice_button);
  ChoiceIcon = new QPixmap((const char **) choice_xpm);
  ChoiceMarkedIcon = new QPixmap((const char **) choicemarked_xpm);
  choicePixmap = new QPixmap((const char **) choice_pixmap);
  choiceShadowBigPixmap = new QPixmap((const char **) choice_shadow_big_pixmap);
  choiceShadowPixmap = new QPixmap((const char **) choice_shadow_pixmap);
    Class(BrowserNode * parent, const char * name, const Q3CString & st);
    Class(BrowserNode * parent, const char * n, char st);
  classButton = new QPixmap((const char **) class_button);
Class::Class(BrowserNode * parent, const char * name, const Q3CString & st)
Class::Class(BrowserNode * p, const char * n, char st)
Class::Class(Package * p, const char * n, char st)
  Class * cl = container->define(name, *((const char *) stereotype));
  ClassDiagramIcon = new QPixmap((const char **) classdiagram_xpm);
ClassDrawingMode drawing_mode(const char * s)
  ClassIcon = new QPixmap((const char **) class_xpm);
  classinstanceButton = new QPixmap((const char **) classinstance_button);
  ClassInstanceIcon = new QPixmap((const char **) classinstance_xpm);
ClassListDialog::ClassListDialog(const char * m,
    ClassListDialog(const char * m, const Q3ValueList<BrowserClass *> & l);
    Class(Package * parent, const char * n, char st);
  ClassViewIcon = new QPixmap((const char **) classes_xpm);
CodDirsCanvas * CodDirsCanvas::read(char * & st, UmlCanvas * canvas, char * & k) {
CodLinkCanvas * CodLinkCanvas::read(char * & st, UmlCanvas * canvas, char * & k)
  ColDiagramIcon = new QPixmap((const char **) coldiagram_xpm);
	  /* comment */
	/* comment */
  componentButton = new QPixmap((const char **) component_button);
  ComponentDiagramIcon = new QPixmap((const char **) componentdiagram_xpm);
  ComponentIcon = new QPixmap((const char **) component_xpm);
  ComponentViewIcon = new QPixmap((const char **) componentview_xpm);
  com->write_string((const char *) args);
    com->write_string((const char *) msg->hierarchical_rank);
      com->write_string((const char *) s);
    com->write_string((const char *) s);
	 connection above */
const char *
		    const char * add_slt, const char * remove_slt,
				 const char * add_slt, const char * remove_slt,
    const char * after;
    const char * after_att;
    const char * after_oper;
    const char * afterparam = 0;
  const char * afterparam = 0;
			    const char * args) {
				     const char * args)
					      const char * args)
					     const char * args)
					 const char * args)
						const char * args)
      const char * args = st->cl->get_value((newst) ? "stereotypeSetParameters" 
    const char * att;
			     const char * (AttributeData::* att_f)() const,
const char * AttributeData::get_idlcase() const {
    const char * attrs[] = {
const char * AType::get_type() const {
    const char * b = 
  const char * b;
    const char * b1 = ((const char *) body) + index + BodyPrefixLength;
const char * BasicData::get_short_stereotype() const {
				     const char * bitfield)
			       const char * bitfield = 0);
				 const char * bitfield = 0);
  const char * body = 0;
      const char * body_indent = strstr(p, "${body}");
    const char * body_indent = strstr(p, "${body}");
  const char * BodyPostfix = "// Bouml preserved body end ";
const char * BodyPostfix = "// Bouml preserved body end ";
const char * BodyPostfix = "## Bouml preserved body end ";
  const char * BodyPrefix = "// Bouml preserved body begin ";
const char * BodyPrefix = "// Bouml preserved body begin ";
const char * BodyPrefix = "## Bouml preserved body begin ";
const char * BodyPythonPostfix = "## Bouml preserved body end ";
const char * BodyPythonPrefix = "## Bouml preserved body begin ";
const char * BrowserActivityAction::help_topic() const  {
const char * BrowserActivityDiagram::help_topic() const  {
const char * BrowserActivity::help_topic() const  {
const char * BrowserActivityNode::help_topic() const  {
const char * BrowserActivityObject::help_topic() const  {
const char * BrowserActivityPartition::help_topic() const  {
const char * BrowserArtifact::help_topic() const  {
const char * BrowserAttribute::constraint() const {
const char * BrowserAttribute::help_topic() const  {
const char * BrowserClass::constraint() const {
const char * BrowserClassDiagram::help_topic() const  {
const char * BrowserClass::help_topic() const  {
const char * BrowserClassInstance::help_topic() const  {
const char * BrowserClassView::help_topic() const  {
const char * BrowserColDiagram::help_topic() const  {
const char * BrowserComponentDiagram::help_topic() const  {
const char * BrowserComponent::help_topic() const  {
const char * BrowserComponentView::help_topic() const  {
const char * BrowserDeploymentDiagram::help_topic() const  {
const char * BrowserDeploymentNode::help_topic() const  {
const char * BrowserDeploymentView::help_topic() const  {
const char * BrowserExpansionRegion::help_topic() const  {
const char * BrowserExtraMember::help_topic() const  {
const char * BrowserFlow::help_topic() const  {
const char * BrowserInterruptibleActivityRegion::help_topic() const  {
const char * BrowserNode::constraint() const {
const char * BrowserNode::get_comment() const {
const char * BrowserNode::get_stereotype() const {
const char * BrowserNode::help_topic() const  {
const char * BrowserObjectDiagram::help_topic() const  {
const char * BrowserOperation::constraint() const {
const char * BrowserOperation::help_topic() const  {
const char * BrowserPackage::help_topic() const  {
const char * BrowserRelation::constraint() const {
const char * BrowserRelation::get_comment() const {
const char * BrowserRelation::help_topic() const  {
const char * BrowserSeqDiagram::help_topic() const  {
const char * BrowserStateAction::help_topic() const  {
const char * BrowserStateDiagram::help_topic() const  {
const char * BrowserState::help_topic() const  {
const char * BrowserUseCaseDiagram::help_topic() const  {
const char * BrowserUseCase::help_topic() const  {
const char * BrowserUseCaseView::help_topic() const  {
  const char * b = strstr(p, "${(}");
			   const char * caption, QString root) {
  const char * cfrom = from;
  const char * cfrom = fromdir.absolutePath().toAscii().constData();
const char * ChangeUserText = "To be an other user.";
			     const char * (ClassData::* class_f)() const,
const char * ClassData::get_formalparam_name(int rank) const {
const char * ClassData::get_formalparam_type(int rank) const {
    const char * cmd;
		  const char * cmd, const char * if_def, const char * end_if,
		 const char * cmd, const char * if_def, const char * end_if, 
			 const char * cmd, const char * if_def, const char * end_if,
			 const char * cmd, const char * if_def, const char * end_if,
				const char * cmd, const char * if_def, const char * end_if,
			const char * cmd, const char * if_def, const char * end_if, 
  const char * cnasp = (const char *)
        const char * cnasp = pack->cppNamespace();
  const char * co = comment;
  const char * comment = description();
  const char * const langs[] = { "Cpp", "Java", "Php" };
      const char *const name,
    const char *const name,
    const char *const whatsThis)
      const char *const whatsThis = NULL );
		       const char * cpp_default_slot,
				   const char * cpp_default_slot,
		       const char * cpp_include_in_header_slot);
				   const char * cpp_include_in_header_slot) {
					 const char * cppname,
					const char * cppname,
		       const char * cpp_unmapped_slot,
				   const char * cpp_unmapped_slot,
				   const char * cpp_update_slot, 
  const char * cto = destdir.absolutePath().toAscii().constData();
  const char * cto = to;
  const char * dash = "";
    const char * decl = def->get_cppdecl();
      const char * decl = def->get_cppdecl_a();
      const char * decl = def->get_cppdecl_b();
	const char * decl = d->get_cppdecl();
	(((const char *) decl)[index-1] != '$'))
	  const char * decl = re->get_cppdecl_a();
	  const char * decl = re->get_cppdecl_b();
				     const char * default_prefix) {
			const char * default_string = 0);
	const char * def = d->get_cpp_def();
	const char * def = d->get_cppdef();
    const char * defltpath0 = "http://schema.omg.org/spec/UML/2.0/uml.xml";
    const char * defltpath1 = "http://schema.omg.org/spec/UML/2.1/uml.xml";
	    const char * descr, UmlOperation *& op)
		       const char * descr, UmlOperation *& op);
		    const char * descr, UmlOperation *& op);
		  const char * descr, UmlOperation *& op)
		 const char * descr, UmlOperation *& op)
			 const char * descr, UmlOperation *& op);
			 const char * descr, UmlOperation *& op)
				const char * descr, UmlOperation *& op);
			const char * descr, UmlOperation *& op);
		const char * descr, UmlOperation *& op)
    const char * df = def->get_cppdef();
  const char * df = def->get_cpp_def();
    const char * dflt;
  const char * dontsubstituteuntil = 0;
    const char * e;
			       const char * e) {
					      const char * e) {
					const char * e) {
  const char * e1 = p1 + s1.length();
  const char * e2 = p2 + s2.length();
			   const char * end_if) {
			const char * end_if);
				       const char * end_if, const char * bitfield) {
	    const char * end_if, const char * descr, UmlOperation *& op) 
		       const char * end_if, const char * descr, UmlOperation *& op);
		    const char * end_if, const char * descr, UmlOperation *& op);
		    const char * end_if, const char * descr, UmlOperation *& op)
		 const char * end_if, const char * descr, UmlOperation *& op)
			   const char * end_if, const char * descr, UmlOperation *& op);
			const char * end_if, const char * descr, UmlOperation *& op);
		const char * end_if, const char * descr, UmlOperation *& op) 
    const char * e = strstr(b, BodyPostfix);
		    const char * expected2)
			   const char * expected2);
      ((const char *) expr);
		     const char * ext) const;
				  const char * ext) const {
			     const char * (ExtraMemberData::* ex_f)() const,
		  const char * field, UmlTypeSpec type,
			 const char * field, UmlTypeSpec type,
  const char * file;
		    const char * filter_slt,
				     const char * flg_name, BrowserNodeList & cl,
	  (const char *) fn.family(),
		 (const char *) fn.family(),
    const char * generate_body(QTextStream & f, Q3CString indent,
    const char * generate_body(QTextStream & f, Q3CString indent, const char * p);
    const char * generate_body(QTextStream & fs, Q3CString indent, const char * p);
		(const char *) GenerationSettings::get_cpp_src_extension());
				       : (const char *) GenerationSettings::get_cpp_src_extension());
				   : (const char *) GenerationSettings::get_idl_extension());
		(const char *) GenerationSettings::get_java_extension());
				    : (const char *) GenerationSettings::get_java_extension());
		(const char *) GenerationSettings::get_php_extension());
				   : (const char *) GenerationSettings::get_php_extension());
		(const char *) GenerationSettings::get_python_extension());
				      : (const char *) GenerationSettings::get_python_extension());
    const char * get;
    const char * get_action(DrawingLanguage) const;
    const char * get_comment_a() const { return a.comment; }
    const char * get_comment_b() const { return b.comment; }
    const char * get_constraint_a() const { return a.constraint; }
    const char * get_constraint_b() const { return b.constraint; }
    const char * get_constraint() const { return constraint; }        
    const char * get_constraint() const { return constraint; } 
    const char * get_constraint() const { return constraint; }
    const char * get_cppdecl_a() const { return a.cpp_decl; }
    const char * get_cppdecl_b() const { return b.cpp_decl; }
    const char * get_cpp_decl() const { return cpp_decl; };
    const char * get_cppdecl() const { return cpp_decl; };
    const char * get_cppdecl() const { return cpp_decl; }
    const char * get_cpp_def() const { return cpp_def; };
    const char * get_cppdef() const { return cpp_def; };
    const char * get_cpp_h() const { return cpp_h; };
    const char * get_cpp_src() const { return cpp_src; };
    const char * get_default_value() const { return default_value; };
    const char * get_formalparam_name(int) const;
    const char * get_formalparam_type(int) const;
    const char * get_idlcase() const;
    const char * get_idldecl_a() const { return a.idl_decl; }
    const char * get_idldecl_b() const { return b.idl_decl; }
    const char * get_idl_decl() const { return idl_decl; };
    const char * get_idldecl() const { return idl_decl; };
    const char * get_idldecl() const { return idl_decl; }
    const char * get_idl_src() const { return idl_src; };
    const char * get_init_value() const { return init_value; }
  const char * get_in_state() const { return in_state; };
    const char * get_javadecl_a() const { return a.java_decl; }
    const char * get_javadecl_b() const { return b.java_decl; }
    const char * get_java_decl() const { return java_decl; };
    const char * get_javadecl() const { return java_decl; }
    const char * get_javadef() const { return java_def; };
    const char * get_java_src() const { return java_src; };
    const char * get_key(int rank) const;
    const char * get_key() { return key; };
    const char * get_multiplicity_a() const { return a.multiplicity; }
    const char * get_multiplicity_b() const { return b.multiplicity; }
    const char * get_multiplicity() const { return multiplicity; }
  const char * get_multiplicity() const { return multiplicity; };
    const char * get_name() const { return name; };
    const char * get_name() const { return name; }
    const char * get_param_default_value(int rank) const;
    const char * get_param_name(int rank) const;
    const char * get_phpdecl_a() const { return a.php_decl; }
    const char * get_phpdecl_b() const { return b.php_decl; }
    const char * get_php_decl() const { return php_decl; };
    const char * get_phpdecl() const { return php_decl; }
    const char * get_phpdef() const { return php_def; };
    const char * get_php_src() const { return php_src; };
    const char * get_pythondecl_a() const { return a.python_decl; }
    const char * get_pythondecl_b() const { return b.python_decl; }
    const char * get_python_decl() const { return python_decl; };
    const char * get_pythondecl() const { return python_decl; }
    const char * get_pythondef() const { return python_def; };
    const char * get_python_src() const { return python_src; };
    const char * get_role_a() const { return a.role; }
    const char * get_role_b() const { return b.role; }
  const char * get_selection(DrawingLanguage) const;
    const char * get_short_stereotype() const;
    const char * get_stereotype() const;
    const char * get_stereotype() const { return stereotype; };
    const char * get_string(const char *& p);
    const char * get_type() const;
    const char * get_type() const { return type; };
    const char * get_value(const char * k) const;
    const char * get_value(int rank) const;
    const char * get_value() { return value; };
      ((const char *) guard) + "]";
const char * HaveKeyValueData::get_key(int rank) const {
const char * HaveKeyValueData::get_value(const char * k) const {
const char * HaveKeyValueData::get_value(int rank) const {
			(const char *) horizontalHeader()->label(col)));
  const char * hr = hierarchical_rank;
  const char * htmltext = ("BOUML release <b>4.22.2</b><br>\n"
    ? ((const char *) idl_case->get_name())
				   const char * idl_default_slot,
		       const char * idl_default_slot, const char * idl_unmapped_slot);
    : ((const char *) idl_explicit_case);
				   const char * idl_unmapped_slot) {
				   const char * idl_update_slot, 
		  const char * if_def, const char * end_if, 
			       const char * if_def, const char * end_if,
			 const char * if_def, const char * end_if, 
				       const char * if_def, const char * end_if)
				     const char * if_def, const char * end_if,
				 const char * if_def, const char * end_if,
				 const char * if_def, const char * end_if);
  const char * items[] = {
    const char * java;
const char * JavaClassNames[] = {
				    const char * java_default_slot,
			const char * java_default_slot,
				    const char * java_edit_annotation) {
			const char * java_edit_annotation);
				      const char * javaname,
				     const char * javaname,
				   const char * javaname,
					 const char * javaname,
				    const char * java_unmapped_slot,
			const char * java_unmapped_slot,
				    const char * java_update_slot, 
			 const char * j, const char * i) {
			    const char * j, const char * p, 
				      const char * k)
				   const char * k = 0);
      const char * k = bn->get_key(index);
				   const char * k, bool unnamed) {
			     const char * k, bool unnamed = FALSE);
      const char * kc;
				      const char * kc, char const * kr);
  const char * key;
	((((const char *) key)[0] != ':') ||
      (((const char *) key)[1] != ':')) {
	 (((const char *) key)[1] != ':'))) {
      const char * k =  get_key(ik);
    const char * kind;
    const char * k =  kv->get_key(ik);
	    const char * k =  kv->get_key(ik);
                const char * k = read_keyword(st);
	const char * k = s;
  const char * label;
const char * LabelCanvas::Triangle = "^^^";
const char * LabelCanvas::Zigzag = "~~~";
  const char * lbl;
		    const char * lbl);
				 const char * lbl) {
			      const char * lbl, bool enabled) {
		  const char * lbl, const char * sl, bool enabled);
			       const char * lbl, const char * sl, bool enabled) {
			 const char * lbl, const char * sl, bool enabled) {
			   const char * lbl, const char * sl_enbeh,
				const char * lbl, const char * sl_trigger,
const char * LeftText = "Go to previous selected <i>class</i>";
    const char * limits = getenv("BOUML_LIMIT_DESKTOP"); // yes !
    const char * mclname = ((const char *) mclpath) + (index + 1);
				    const char * mclpath)
  const char * msg = "\
    const char * n;
    const char * name;
  const char * name;
				    const char * name)
				   const char * name,
				  const char * name,
				 const char * name)
					      const char * name)
					 const char * name) {
						  const char * name)
								      const char * name)
						const char * name)
    const char * name = browser_node->get_name();
				 const char * name, const PinParamData & pd)
		      const char * namespec);
			 const char * namespec)
const char * name_spec(const char * spec)
    const char * name = text(0);
  const char * name = UmlCom::read_string();
		   const char * name, UmlTypeSpec type);
			     const char * name, UmlTypeSpec type) {
    const char * new_contains = newdef;
				   const char * newname = 0);
				  const char * newname = 0);
  const char * newprop = (const char *) prop_newname;
    const char * n = t[index1][1];
    const char * o;
const char * ObjectData::get_selection(DrawingLanguage lang) const {
  const char * oldprop = (const char *) prop_oldname;
  const char * oldsst = (const char *) oldst;
const char * OpenText = "";
const char * OpenText = "To load a project";
const char * OperationData::get_param_default_value(int rank) const {
const char * OperationData::get_param_name(int rank) const {
			     const char * (OperationData::* oper_f)() const,
    const char * opers[] = {
		   ((((const char *) op_name) + 1) == name)) {
	  const char * op_name = ((BrowserNode *) child)->get_name();
    const char * o = t[index1][0];
      const char * p;
	    const char * p;
					 const char * p) {
					 const char * p)
  const char * p1 = (s1.isNull()) ? "" : (const char *) s1;
      const char * p2 = p;
    const char * p2 = p;
  const char * p2 = (s2.isNull()) ? "" : (const char *) s2;
      const char * p2 = strchr(p, '"');
      const char * p3 = strchr(p, '\\');
		 const char * params, Q3CString body,
			    const char * params, Q3CString body,
			   const char * params, Q3CString body,
  const char * parent_stereotype = 
		     ((const char *) path) +
  const char * path = cl->get_value("stereotypeIconPath");
      const char * pb = p;
  const char * pb = strstr(p, "${body}");
      const char * p = cfrom+index;
      const char * p = cfrom + lastsep + 1;
  const char * pclosed;
  const char * p = ((const char *)  s) + index;
	     const char * p, const char * y, const char * i);
  const char * p = _context.pointer;  
	const char * p = _context.pointer;
      const char * p = cppDecl();
    const char * p = cppDecl();
  const char * p = cppDecl();
      const char * p = cppDef();
    const char * p = cppDef();
  const char * p = cs;
  const char * p = decl;
      const char * p = def;
    const char * p = def;
  const char * p = def;
    const char * p = description;
  //	const char * p = edcppdecl->text();
    //	const char * p = edcppdef->text()
  //	const char * p = edidldecl->text();
  //	const char * p = edjavadecl->text();
  //	const char * p = edjavadef->text();
  //	const char * p = edphpdecl->text();
  //	const char * p = edphpdef->text();
  //	const char * p = edpythondecl->text();
  //	const char * p = edpythondef->text();
    const char * p = filedef;
  const char * p = form;
            const char * p = hdef;
    const char * php;
				   const char * php_default_slot,
		       const char * php_default_slot, const char * php_unmapped_slot);
				      const char * phpname)
				   const char * phpname = 0);
				   const char * php_unmapped_slot) {
				   const char * php_update_slot, 
      const char * p = idlDecl();
    const char * p = idlDecl();
  const char * p = idlDecl();
      const char * p = javaDecl();
    const char * p = javaDecl();
  const char * p = javaDecl();
	const char * p = javaDecl();
    const char * p = JavaSettings::enumPatternItemCase();
      const char * p = k;
  const char * p = k;
      const char * pname = name_spec(p);
    const char * postfix;
			       const char *& pp);
			   const char *& pp)
				      const char *& pp);
				  const char *& pp);
            const char * pp = 0;
      const char * pp = 0;
    const char * pp = 0;
  const char * pp = 0;
		    const char *& pp, bool javadoc)
			   const char *& pp, bool javadoc);
      const char * p = phpDecl();
    const char * p = phpDecl();
  const char * p = phpDecl();
	const char * p = phpDecl();
  const char * p = ps;
    const char * p = pythonDecl();
  const char * p = pythonDecl();
		  const char *& p, QString & s,
            const char * p = read_buffer();
    const char * prefix;
      //	const char * p = role.edcppdecl->text();
      //	const char * p = role.edidldecl->text();
      //	const char * p = role.edjavadecl->text();
      //	const char * p = role.edphpdecl->text();
      //	const char * p = role.edpythondecl->text();
  const char * prop = (const char *) prop_name;
        const char * p = s;
      const char * p = s;
    const char * p = s;
    const char * ps;
  const char * p = s;
            const char * p = srcdef;
  const char * ps  = s;
  const char * p = strchr(s, ':');
  const char * p = strchr(s, '\n');
  const char * p = strstr(spec, "${name}");
    const char * p = type;
    const char * python;
				      const char * python_default_slot,
			  const char * python_default_slot, const char * python_unmapped_slot);
					 const char * pythonname)
					const char * pythonname)
				      const char * pythonname = 0);
				     const char * pythonname = 0);
				      const char * python_unmapped_slot) {
				      const char * python_update_slot, 
    const char * read_buffer();
const char * RelationData::get_idlcase(const RoleData & role)
			     const char * (RelationData::* rel_a_f)() const,
			     const char * (RelationData::* rel_b_f)() const,
				const char * return_type, bool excpt) {
			  const char * return_type, bool excpt = FALSE);
const char * RightText = "Go to next selected <i>class</i>";
    const char * r = p;
  const char * r = svg[c];
    const char * s =
  const char * s;
	       (const char *)s);
		   (const char *)s);
			     const char * s,
					  const char * s)
						      const char * s);
	   (((const char *) s)[0] != '$')) {
	  const char * s1 = com->get_string(args);
	  const char * s2 = (api_version < 41) ? "" : args;
const char * SaveText = "";
const char * ScanText =
	const char * s = cl->def->get_stereotype();
  const char * s = comment;
		     const char * s, const char * a);
			   const char * s, const char * a)
const char * SearchText = "To search a <i>package</i> in the <i>browser</i>.";
const char * SearchText = "To search an item in the <i>browser</i>.";
            const char * sep = "<";
      const char * sep = "(";
    const char * sep = "<";
    const char * sep;
  const char * sep = "<";
  const char * sep = " : ";
  const char * sep = "";
  const char * sep = "(";
  const char * sep;
	  const char * sep;
	const char * sep = " {";
	const char * sep;
  const char * sep = 0;	// to avoid warning
        const char * sep1 = "template<";
    const char * sep1 = "template<";
                const char * sep2 = "<";
        const char * sep2 = "<";
    const char * sep2 = "<";
	const char * sep2 = "<";
		  const char *& sep2, BooL & need_space) const;
				  const char *& sep2, BooL & need_space) const {
  const char * sep = " extends ";
  const char * sep = " implements ";
  const char * sep = " points=\"";
  const char * sep = " raises (";
    const char * sep = "template<";
  const char * sep = "template<";
	const char * sep = "  template <";
    const char * sep = " throw(";
  const char * sep = " throw (";
  const char * sep = " throws ";
    const char * set;
    const char * s = formals[index].get_name();
    const char * s = it.current()->get_name();
  const char * sizetext = ("BOUML release <b>4.88.88 patch 1</b>\n"
				    const char * sl, bool enabled) {
		  const char * sl_enbeh, const char * sl_exbeh, const char * sl_beh,
			   const char * sl_exbeh, const char * sl_beh,
		  const char * sl_expr, bool enabled);
				const char * sl_guard, const char * sl_expr,
		  const char * sl_guard, const char * sl_selection,
			  const char * sl_guard, const char * sl_selection,
				 const char * slt,
		  const char * sl_transformation, bool enabled);
			  const char * sl_transformation, bool enabled) {
		  const char * sl_trigger, const char * sl_guard,
	  const char * s = mcl->get_value("metaclassPath");
				      const char * s = "region");
    const char * s = st->cl->get_value("stereotypeCheck");
  const char * s = stereotype;
						   const char * st) {
const char * StateActionData::get_action(DrawingLanguage ln) const {
	 const char * st = at->get_stereotype();
		  			      const char * st, bool non_nested) {
					  const char * st, bool non_nested)
  const char * st = ((BrowserClass *) parent())->get_stereotype();
    const char * st = browser_node->get_data()->get_short_stereotype();
  const char * st = browser_node->get_data()->get_short_stereotype();
      const char * st = data->get_short_stereotype();
    const char * st = data->get_short_stereotype();
  const char * st = def->get_stereotype();
    const char * st = d->get_stereotype();
				       const char * stereotype)
				    const char * stereotype = 0);
  const char * stereotype = browser_node->get_data()->get_stereotype();
	const char * stereotype = cl->get_data()->get_stereotype();
    const char * stereotype = data->get_stereotype();
    const char * stereotype = def->get_stereotype();
  const char * stereotype = def->get_stereotype();
	const char * stereotype = def->get_stereotype();
  const char * stereotype = get_data()->get_stereotype();
    const char * st = get_class()->get_data()->get_short_stereotype();
				     const char * str) {
				     const char * str) const {
						     const char * str) const {
const char * stringify(CanvasFormat v)
const char * stringify(ClassDrawingMode v)
const char * stringify(DrawingLanguage l)
const char * stringify(LineGeometry v)
const char * stringify(ShowContextMode v)
const char * stringify(Uml3States s)
const char * stringify(UmlActionKind a)
const char * stringify(UmlCode c) {
const char * stringify(UmlColor c)
const char * stringify(UmlExpansionKind k)
const char * stringify(UmlFont f)
const char * stringify(UmlOrderingKind k)
const char * stringify(UmlParamDirection d) {
const char * stringify(UmlParamEffect e) {
const char * stringify(UmlVisibility v)
  const char * str = s;
const char * svg_color(UmlColor c)
  const char * s = x_of->get_name();
	      const char * t, const char * ex) const;
		 const char * t, const char * ex) const {
			(const char *) text(index, 0),
				     const char * title,
			const char * title = 0,
		 const char * title, const char * df);
			   const char * title, const char * df)
const char * ToolCom::get_string(const char *& p)
const char * Tool::command(const char * d)
const char * Tool::command(int rank)
const char * ToolCom::read_buffer()
    const char * topic =
				 const char * type,
				       const char * type, const char * if_def,
						const char * u)
	  const char * u = com->get_string(args);
const char * UmlCom::read_string()
const char * UmlOperation::generate_body(QTextStream & f,
const char * UmlOperation::generate_body(QTextStream & fs,
			    + ((const char *) uml_pa->name()) + "</b></font><br>");
const char * UpText = "To select the <i>browser</i> current item's parent.";
	  << " \"" << (const char *) user_name() << '"';
const char * user_name()
      const char * v;
      const char * value = 0;
				    const char * v, const char * lbl,
    const char * v = _defines.find((const char *) result);
	const char * v = d->get_init_value();
  const char * views[] = {
      const char * what;
    const char * what;
  const char * what;
			    const char * y, const char * i) {
const Q3CString & CppSettings::attributeDecl(const char * multiplicity)
const Q3CString & CppSettings::relationDecl(bool by_value, const char * multiplicity)
const Q3CString & IdlSettings::attributeDecl(const char * multiplicity)
const Q3CString & IdlSettings::constDecl(const char * multiplicity)
const Q3CString & IdlSettings::relationDecl(const char * multiplicity)
const Q3CString & IdlSettings::unionItemDecl(const char * multiplicity)
const Q3CString & IdlSettings::unionRelationDecl(const char * multiplicity)
const Q3CString & IdlSettings::valuetypeAttributeDecl(const char * multiplicity)
const Q3CString & IdlSettings::valuetypeRelationDecl(const char * multiplicity)
const Q3CString & JavaSettings::attributeDecl(const char * multiplicity)
const Q3CString & JavaSettings::relationDecl(const char * multiplicity)
const Q3CString & PythonSettings::attributeDecl(const char * multiplicity)
const Q3CString & PythonSettings::relationDecl(bool composition, const char * multiplicity)
		       const QObject * receiver, const char * member)
			    const QObject * receiver, const char * member);
const QPixmap * ProfiledStereotypes::browserPixmap(const char * s)
const QPixmap * ProfiledStereotypes::diagramPixmap(const char * s, double zoom)
  const QString nasp =  (const char *)
  const QString pack =  (const char *)
  continuationButton = new QPixmap((const char **) continuation_button);
  cpp_def.assign((const char *) model->cpp_def, FALSE);
      cpp_h_path = get_path((const char *) pd->get_cpp_h_dir(),
      cpp_src_path = get_path((const char *) pd->get_cpp_src_dir(),
  DarkBluePixmap = new QPixmap((const char **) darkblue_xpm);
  DarkGrayPixmap = new QPixmap((const char **) darkgray_xpm);
  DarkGreenPixmap = new QPixmap((const char **) darkgreen_xpm);
  DarkMagentaPixmap = new QPixmap((const char **) darkmagenta_xpm);
  DarkOrangePixmap = new QPixmap((const char **) darkorange_xpm);
  DarkYellowPixmap = new QPixmap((const char **) darkyellow_xpm);
	  dcl.insert(dcl.find("${(}"), (const char *)friend_template);
	dcl.insert(dcl.find("${(}"), (const char *)friend_template);
    d = (const char *) GenerationSettings::cpp_default_oper_def();
  decisionButton = new QPixmap((const char **) decision_button);
  DecisionIcon = new QPixmap((const char **) decision_xpm);
  DecisionMarkedIcon = new QPixmap((const char **) decisionmarked_xpm);
    decl.insert(decl.find("${)}") + 4, (const char *)Lex::region());
      decl.insert(decl.find(';'), (const char *)(Q3CString(" : ") + bitfield));
      decl.insert(decl.findRev(';'), (const char *)(s + Lex::region()));	// decl contains ';'  
    decl.remove(index, (((const char *) decl)[index + 7] == ' ') ? 8 : 7);
  deepHistoryBigPixmap = new QPixmap((const char **) deephistory_big_pixmap);
  deephistoryButton = new QPixmap((const char **) deephistory_button);
  DeepHistoryIcon = new QPixmap((const char **) deephistory_xpm);
  DeepHistoryMarkedIcon = new QPixmap((const char **) deephistorymarked_xpm);
  deepHistoryPixmap = new QPixmap((const char **) deephistory_pixmap);
      def.insert(def.find("${type}") + 7, (const char *)s);
      def.insert(index + 4, (const char *)(" default" + s));
      def.insert(index + 7, (const char *)array);
      def.insert(index, (const char *)(oper_templ + " "));
	  def.remove(index, (((const char *) def)[index + 7] == ' ') ? 8 : 7);
	def.remove(index, (((const char *) def)[index + 7] == ' ') ? 8 : 7);
  DeletedActionIcon = new QPixmap((const char **) deletedaction_xpm);
  DeletedActivityAcceptEventIcon = new QPixmap((const char **) deletedactivityacceptevent_xpm);
  DeletedActivityAcceptTimeIcon = new QPixmap((const char **) deletedactivityaccepttime_xpm);
  DeletedActivityActionIcon = new QPixmap((const char **) deletedactivityaction_xpm);
  DeletedActivityDiagramIcon = new QPixmap((const char **) deletedactivitydiagram_xpm);
  DeletedActivityIcon = new QPixmap((const char **) deletedactivity_xpm);
  DeletedActivityPartitionIcon = new QPixmap((const char **) deletedactivitypartition_xpm);
  DeletedActivitySendSignalIcon = new QPixmap((const char **) deletedactivitysendsignal_xpm);
  DeletedActorIcon = new QPixmap((const char **) deletedactor_xpm);
  DeletedArtifactIcon = new QPixmap((const char **) deletedartifact_xpm);  
  DeletedAttributeIcon = new QPixmap((const char **) deletedattribute_xpm);
  DeletedChoiceIcon = new QPixmap((const char **) deletedchoice_xpm);
  DeletedClassDiagramIcon = new QPixmap((const char **) deletedclassdiagram_xpm);
  DeletedClassIcon = new QPixmap((const char **) deletedclass_xpm);
  DeletedClassInstanceIcon = new QPixmap((const char **) deletedclassinstance_xpm);
  DeletedClassViewIcon = new QPixmap((const char **) deletedclasses_xpm);
  DeletedColDiagramIcon = new QPixmap((const char **) deletedcoldiagram_xpm);
  DeletedComponentDiagramIcon = new QPixmap((const char **) deletedcomponentdiagram_xpm);  
  DeletedComponentIcon = new QPixmap((const char **) deletedcomponent_xpm);  
  DeletedComponentViewIcon = new QPixmap((const char **) deletedcomponentview_xpm);  
  DeletedDecisionIcon = new QPixmap((const char **) deleteddecision_xpm);
  DeletedDeepHistoryIcon = new QPixmap((const char **) deleteddeephistory_xpm);
  DeletedDeploymentDiagramIcon = new QPixmap((const char **) deleteddeploymentdiagram_xpm);  
  DeletedDeploymentNodeIcon = new QPixmap((const char **) deleteddeploymentnode_xpm);  
  DeletedDeploymentViewIcon = new QPixmap((const char **) deleteddeploymentview_xpm);  
  DeletedEntryPointIcon = new QPixmap((const char **) deletedentrypoint_xpm);
  DeletedExitPointIcon = new QPixmap((const char **) deletedexitpoint_xpm);
  DeletedExpansionNodeIcon = new QPixmap((const char **) deletedexpansionnode_xpm);
  DeletedExpansionRegionIcon = new QPixmap((const char **) deletedexpansionregion_xpm);
  DeletedExtraMemberIcon = new QPixmap((const char **) deletedextramember_xpm);
  DeletedFinalIcon = new QPixmap((const char **) deletedfinal_xpm);
  DeletedForkIcon = new QPixmap((const char **) deletedfork_xpm);
  DeletedInitialIcon = new QPixmap((const char **) deletedinitial_xpm);
  DeletedInterruptibleActivityRegionIcon = new QPixmap((const char **) deletedinterruptibleactivityregion_xpm);
  DeletedJoinIcon = new QPixmap((const char **) deletedjoin_xpm);
  DeletedJunctionIcon = new QPixmap((const char **) deletedjunction_xpm);
  DeletedMergeIcon = new QPixmap((const char **) deletedmerge_xpm);
  DeletedObjectDiagramIcon = new QPixmap((const char **) deletedobjdiagram_xpm);
  DeletedOperationIcon = new QPixmap((const char **) deletedoperation_xpm);
  DeletedPackageIcon = new QPixmap((const char **) deleted_package_xpm);
  DeletedPackageIcon = new QPixmap((const char **) deletedpackage_xpm);
  DeletedParameterIcon = new QPixmap((const char **) deletedparameter_xpm);
  DeletedParameterSetIcon = new QPixmap((const char **) deletedparameterset_xpm);
  DeletedPinIcon = new QPixmap((const char **) deletedpin_xpm);
  DeletedProfileIcon = new QPixmap((const char **) deletedprofile_xpm);
  DeletedRegionIcon = new QPixmap((const char **) deletedregion_xpm);
  DeletedRelationIcon = new QPixmap((const char **) deletedrelation_xpm);
  DeletedSeqDiagramIcon = new QPixmap((const char **) deletedseqdiagram_xpm);
  DeletedShallowHistoryIcon = new QPixmap((const char **) deletedshallowhistory_xpm);
  DeletedSignalInIcon = new QPixmap((const char **) deletedsignalin_xpm);
  DeletedSignalOutIcon = new QPixmap((const char **) deletedsignalout_xpm);
  DeletedStateDiagramIcon = new QPixmap((const char **) deletedstatediagram_xpm);
  DeletedStateIcon = new QPixmap((const char **) deletedstate_xpm);
  DeletedStereotypeIcon = new QPixmap((const char **) deletedstereotype_xpm);
  DeletedTemplateIcon = new QPixmap((const char **) deletedtemplate_xpm);
  DeletedTerminateIcon = new QPixmap((const char **) deletedterminate_xpm);
  DeletedUseCaseDiagramIcon = new QPixmap((const char **) deletedusecasediagram_xpm);
  DeletedUseCaseIcon = new QPixmap((const char **) deletedusecase_xpm);
  DeletedUseCaseViewIcon = new QPixmap((const char **) deletedusecases_xpm);
      delete *it;
  deltax *= 3.0/5.0;
  deltay *= 3.0/5.0;
  dependencyButton = new QPixmap((const char **) dependency_button);
  DeploymentDiagramIcon = new QPixmap((const char **) deploymentdiagram_xpm);
  deploymentNodeButton = new QPixmap((const char **) deploymentnode_button);
DeploymentNodeCanvas * DeploymentNodeCanvas::read(char * & st, UmlCanvas * canvas, char * k) {
  DeploymentNodeIcon = new QPixmap((const char **) deploymentnode_xpm);
  DeploymentViewIcon = new QPixmap((const char **) deploymentview_xpm);
DiagramItem * DiagramItem::dict_get(int id, const char * kind,
	  d.insert(index + 4, (const char *) next_mult);
      d.insert(index, (const char *) arg_spec);
  directionalAggregationButton = new QPixmap((const char **) directionalaggregation_button);
  directionalAggregationByValueButton = new QPixmap((const char **) directionalaggregationbyvalue_button);
  directionalAssociationButton = new QPixmap((const char **) directionalassociation_button);
  directionalAssociationExtensionButton = new QPixmap((const char **) directionalassociationextension_button);
  DirFilter = (!(s = (const char *) CppSettings::reverseRoundtripDirRegExp()).isEmpty())
  DirFilter = (!(s = (const char *) JavaSettings::reverseRoundtripDirRegExp()).isEmpty())
  DirFilter = (!(s = (const char *) PhpSettings::reverseRoundtripDirRegExp()).isEmpty())
  downPixmap = new QPixmap((const char **) down_xpm);
DrawingLanguage drawing_language(const char * s)
  editButton = new QPixmap((const char **) edit_button);
	  else if ((*((const char *) op_name) == '~') &&
    else if (*((const char *) s) == '<') {
    else if (*((const char *) s) == '[') {
    else if (*((const char *) s) == '[')
    else if (*((const char *) s) == '@')
  else if ((((const char *) s)[0] != '&') &&
  else if (strstr((const char *) art->cpp_def, "${body}") == 0) {
  entryPointBigPixmap = new QPixmap((const char **) entrypoint_big_pixmap);
  entrypointButton = new QPixmap((const char **) entrypoint_button);
  EntryPointIcon = new QPixmap((const char **) entrypoint_xpm);
  entryPointPixmap = new QPixmap((const char **) entrypoint_pixmap);
  exitPointBigPixmap = new QPixmap((const char **) exitpoint_big_pixmap);
  exitpointButton = new QPixmap((const char **) exitpoint_button);
  ExitPointIcon = new QPixmap((const char **) exitpoint_xpm);
  exitPointPixmap = new QPixmap((const char **) exitpoint_pixmap);
  expansionnodeButton = new QPixmap((const char **) expansionnode_button);
  ExpansionNodeIcon = new QPixmap((const char **) expansionnode_xpm);
  ExpansionNodeMarkedIcon = new QPixmap((const char **) expansionnodemarked_xpm);
  expansionregionButton = new QPixmap((const char **) expansionregion_button);
  ExpansionRegionIcon = new QPixmap((const char **) expansionregion_xpm);
  ExpansionRegionMarkedIcon = new QPixmap((const char **) expansionregionmarked_xpm);
extern bool is_referenced(const char * s, int id, const char * kc, const char * kr);
extern bool manage_comment(QString comment, const char *& p,
extern bool manage_description(QString comment, const char *& p,
extern bool manage_python_comment(QString comment, const char *& p,
extern bool manage_python_description(QString comment, const char *& p,
extern bool need_equal(const char * p, const char * v);
extern bool need_equal(const char * p, const char * v, bool cpp);
extern bool need_equal(const char * p, QString v, bool cpp);
extern bool start_svg(const char * f, int w, int h);
extern CanvasFormat canvas_format(const char * s);
extern char * read_definition(int id, const char * ext);
extern char * read_file(QString filename);
extern char * read_file(QString filename, int offset, int len);
extern char * read_keyword(char * & st);
extern char * read_keyword(char * & st, const char * expected);
extern char * read_keyword(char * & st, const char * expected1,
extern char * read_string(char * & st);
extern char * skip_until(char * & st, const char * expected);
extern ClassDrawingMode drawing_mode(const char * s);
extern const char * name_spec(const char *);
extern const char * stringify(CanvasFormat);
extern const char * stringify(ClassDrawingMode);
extern const char * stringify(DrawingLanguage);
extern const char * stringify(LineGeometry);
extern const char * stringify(ShowContextMode);
extern const char * stringify(Uml3States);
extern const char * stringify(UmlActionKind);
extern const char * stringify(UmlCode);	// lines only
extern const char * stringify(UmlColor);
extern const char * stringify(UmlExpansionKind);
extern const char * stringify(UmlFont);
extern const char * stringify(UmlOrderingKind);
extern const char * stringify(UmlParamDirection);
extern const char * stringify(UmlParamEffect);
extern const char * stringify(UmlVisibility);
extern const char * svg_color(UmlColor);
extern const char * user_name();
extern DrawingLanguage drawing_language(const char * s);
extern int new_place(IdDict<void> & d, int user_id, void *);
extern int place(IdDict<void> & d, int id, void *);
extern LineGeometry line_geometry(const char * s);
extern Q3CString current_indent(const char * p, const char * begin);
extern QString abs_file_path(int id, const char * ext);
extern QString toUnicode(const char *);
extern ShowContextMode context_mode(const char * s);
extern Uml3States state(const char * s);
extern UmlActionKind activity_action_kind(const char * s);
extern UmlCode activity_node_kind(const char * s);
extern UmlCode arrow_type(const char *);
extern UmlCode pseudo_state_kind(const char * s);
extern UmlCode relation_type(const char * s,
extern UmlColor color(const char * s);
extern UmlExpansionKind expansion_mode_kind(const char * s);
extern UmlFont font(const char * s);
extern UmlOrderingKind ordering(const char * s);
extern UmlParamDirection direction(const char * s);
extern UmlParamEffect effect(const char * s);
extern UmlVisibility visibility(const char * s);
extern void conditional(Q3CString & s, const char * if_def,
extern void defGetField_(UmlClass * base, const char * where, const char * oper,
extern void defGetPtr_(UmlClass * base, const char * where, const char * oper,
extern void defGet_(UmlClass * base, const char * where, const char * oper,
extern void defGetValue_(UmlClass * base, const char * where, const char * oper,
extern void defSetBoolBitField_(UmlClass * base, const char * where, const char * oper,
extern void defSetBool_(UmlClass * base, const char * where, const char * oper, 
extern void defSetEnum_(UmlClass * base, const char * where, const char * oper, 
extern void defSetField_(UmlClass * base, const char * where, const char * oper,
extern void defSetPtr_(UmlClass * base, const char * where, const char * oper,
extern void defSetRefType_(UmlClass * base, const char * where, const char * oper,
extern void defSet_(UmlClass * base, const char * where, const char * oper,
extern void delete_definition(int id, const char * ext);
extern void edit(const QString &, QString name, void * id, EditType k,
extern void * load_ptr(QBuffer &);
extern void manage_alias(const BrowserNode * node, const char *& p,
extern void manage_python_docstring(QString comment, const char *& p, const char *& pp,
extern void memo_idmax_loc(int & idmaxref, const char * who);
extern void read_color(char *& st, const char *, UmlColor &, char * &);
extern void read_font(char *& st, const char *, UmlFont &, char * &);
extern void read_string_list(QStringList & list, char * & st);
extern void read_unicode_string_list(QStringList & list, char * & st);
extern void save_color(QTextStream & st, const char *, UmlColor, BooL &);
extern void save_definition(int id, const char * ext, const char * def, BooL & is_new);
extern void save_if_needed(const char * filename, const char * newdef);
extern void save_ptr(const void *, QBuffer &);
extern void save_string(const char *, QTextStream & st);
extern void save_xy(QTextStream & st, const Q3CanvasItem * c, const char * s);
extern void save_xyz(QTextStream & st, const Q3CanvasItem * c, const char * s);
extern void save_xyzwh(QTextStream & st, const Q3CanvasRectangle * c, const char * s);
extern void unknown_keyword(const char * k);
extern void unknown_ref(const char * kind, int id);
extern void unread_keyword(char * keyword, char * & st);
extern void will_change_id(IdDict<void> & d, int &, void *);
extern void wrong_keyword(const char * k, const char * expected);
  ExtraMemberIcon = new QPixmap((const char **) extramember_xpm);
  ExtraMemberMarkedIcon = new QPixmap((const char **) extramembermarked_xpm);
	f << ((const char *) nasp) + currentNasp.length() + 1 << '\\';
  FileFilter = (!(s = (const char *) CppSettings::reverseRoundtripFileRegExp()).isEmpty())
  FileFilter = (!(s = (const char *) JavaSettings::reverseRoundtripFileRegExp()).isEmpty())
  FileFilter = (!(s = (const char *) PhpSettings::reverseRoundtripFileRegExp()).isEmpty())
      FILE * fp2 = fopen((const char *) lang, "r");
      FILE * fp = fopen((const char *) l, "rb");
  FILE * fp = fopen((const char *) path, "rb");
    FILE * fp = fopen((const char *) path, "wb");
  FILE * fp = fopen((const char *) s, "a");
      FILE * fp = fopen((const char *) s, "r");
    FILE * fp = fopen((const char *) s, "r");
  FILE * fp = fopen((const char *) s, "r");
	FILE * fp = fopen((const char *) s, "r");
    FILE * fp = fopen((const char *) s, "w");
  FILE * fp = fopen((const char *) s, "w");
    FILE * fpfrom = fopen((const char *) from, "rb");
  FILE * fpin = fopen((const char *) from, "rb");
    FILE * fpout = fopen((const char *) to, "wb");
      FILE * fpto = fopen((const char *) to, "rb");
  finalBigPixmap = new QPixmap((const char **) final_big_pixmap);
  finalButton = new QPixmap((const char **) final_button);
  FinalIcon = new QPixmap((const char **) final_xpm);
  FinalMarkedIcon = new QPixmap((const char **) finalmarked_xpm);
  finalPixmap = new QPixmap((const char **) final_pixmap);
  fitscaleButton = new QPixmap((const char **) fitscale_button);
FlowCanvas * FlowCanvas::read(char * & st, UmlCanvas * canvas, char * k)
FlowData * FlowData::read(char * & st, char * & k)
      fn = ((const char *) pack->name) + QString(".prj");
    fn.sprintf("%s.prj", (const char *) name);
	fn.sprintf("%s.prj", (const char *) name);
    for (const char * cpponly = "()&^[]%|!+-*/=<>~";
      for (const char * p = k; *p; p += 1)
  forkButton = new QPixmap((const char **) fork_button);
  ForkIcon = new QPixmap((const char **) fork_xpm);
  ForkMarkedIcon = new QPixmap((const char **) forkmarked_xpm);
		format, (const char *) text(TREE_COL), (const char *) text(REVISION_COL));
	form.insert(index + strlen(k), (const char *)str_actuals);
  foundasyncmsgButton = new QPixmap((const char **) foundasyncmsg_button);
  foundsyncmsgButton = new QPixmap((const char **) foundsyncmsg_button);
    fprintf(fp, "CHARSET %s\n", (const char *) cb_charset->currentText());
    fprintf(fp, "EDITOR %s\n", (const char *) ed_editor->text());
    fprintf(fp, "LANG %s\n", (const char *) ed_lang->text());
	fprintf(fp, "LANG %s\n", (const char *) lang);
    fprintf(fp, "MANUAL %s\n", (const char *) ed_doc->text());
	  fprintf(fp, "  modified_by %d \"%s\"\n", modifier_id, (const char *) modifier_name);
    fprintf(fp, "NAVIGATOR %s\n", (const char *) ed_navigator->text());
	      fprintf(fp, " \"%s\"\n", (const char *) s);
    fprintf(fp, "TEMPLATE %s\n", (const char *) ed_template->text());
                    fputs((const char *) file->data(), fp_src);
	fputs((const char *) file, fp);
                    fputs((const char *) headerFile->data(), fp_h);
	fputs((const char *) s, fp);
            fputs((const char *) srcdef, fp_src);
      fputs((const char *) srcdef, fp_src);
  fragmentButton = new QPixmap((const char **) fragment_button);
FragmentCanvas * FragmentCanvas::read(char * & st, UmlCanvas * canvas, char * k)
  FreePackageIcon = new QPixmap((const char **) free_package_xpm);
  friend int new_place(IdDict<void> & d, int user_id, void *);
  friend int place(IdDict<void> & d, int id, void *);
      f.sprintf("%s_%lx_%d.%s", (const char *) name, (unsigned long) id, user_id(),
      f.sprintf("%s_%lx_%d.txt", (const char *) name, (unsigned long) id, user_id());
    full_path = (const char *) name;
      fwrite((const char *) d, 1, d.length(), fp);
	      fwrite((const char *) path, 1, path.length(), fp);
	    fwrite((const char *) path, 1, path.length(), fp);
	fwrite((const char *) path, 1, path.length(), fp);
  generalisationButton = new QPixmap((const char **) generalisation_button);
  get();	// the *
     given path */
  GrayPixmap = new QPixmap((const char **) gray_xpm);
  GreenPixmap = new QPixmap((const char **) green_xpm);
       : "[" + guard.MyStr::operator QString() + ((horiz) ? "] " : "]\n") + "{weight=" + ((const char *) weight) + '}');
  hubButton = new QPixmap((const char **) hub_button);
IconCanvas * IconCanvas::read(char * & st, UmlCanvas * canvas, char * k)
    IdDict(const char * who) {old_diagram = false; idmax = 0; memo_idmax_loc(idmax, who); }
    IdDict(int sz, const char * who) {old_diagram = false; idmax = 0; dict[0].resize(sz); memo_idmax_loc(idmax, who); }
      idl_path = get_path((const char *) pd->get_idl_dir(),
      if (*((const char *) body) == '\n')
	  if (*((const char *) d) == '=')
// 	if (((const char *) di->fileName())[0] != '.') {
	  if (((const char *) di->fileName())[0] != '.')
	if (((const char *) di->fileName())[0] != '.') {
	if (((const char *) di->fileName())[0] != '.')
      if (*((const char *) e) == '\n')
      if (((const char *) import)[import.length() - 1] == '.')
  if ((((const char *) key)[0] != ':') ||
  if (((const char *) key)[0] != '\\') {
    if ((*((const char *) multiplicity) != '[') ||
	if (*((const char *) multiplicity) != '[')
  if (((const char *) name)[0] == '$')
    if ((*((const char *) name) != '~') && ((index = decl.find("${virtual}")) != -1))
      if (*((const char *) param.default_value) == ' ')
    if (*((const char *) param.default_value) == ' ')
    if (((const char *) path)[pathlen - 1] != '/') {
  if (((const char *) s)[0] != '$') {
    if ((((const char *) s)[0] != ':') || (((const char *) s)[1] != ':')) {
      if (((const char *) s)[index3 - 1] != '\\')
      if (((const char *) s)[index3 - 1] != '\\')
      if (*((const char *) s) == '\n')
  if ((fp_dest = fopen((const char *) dest_path, "wb")) == 0) {
  if ((fp = fopen((const char *) path, "rb")) != 0) {  
      if ((fp = fopen((const char *) path, "wb")) == 0) {
      if ((fp = fopen((const char *) s, "w")) != 0) {
	    if ((fp = fopen((const char *) s, "w")) != 0) {
	  if ((fp = fopen((const char *) s, "w")) != 0) {
                if ((fp_h = fopen((const char *) h_path, "wb")) == 0) {
  if ((fp_src = fopen((const char *) src_path, "rb")) == 0) {
                if ((fp_src = fopen((const char *) src_path, "wb")) == 0) {
        if ((fp_src = fopen((const char *) src_path, "wb")) == 0) {
    if ((fp_src = fopen((const char *) src_path, "wb")) == 0) {
    if ((full_name = ((const char *) data->get_cpp_namespace())).isEmpty())
    if ((full_name = ((const char *) data->get_idl_module())).isEmpty())
    if ((full_name = ((const char *) data->get_java_package())).isEmpty())
    if ((full_name = ((const char *) data->get_python_package())).isEmpty())
    if ((index != -1) && (s.left(index) == (const char *) cl->text(0)))
      if (!m.isEmpty() && (*((const char *) m) == '['))
	  if (!m.isEmpty() && (*((const char *) m) == '['))
    if (must_be_saved(src_path, (const char *) srcdef)) {
  if (must_be_saved(src_path, (const char *) srcdef)) {
  if (!nohack && (text(0) == (const char *) name)) {
  if (!nohack && (text(0) == (const char *) name))
      if (!path.isEmpty() && (get_pixmap((const char *) path) == 0)) {
  if (!s.isEmpty() && (*((const char *) s) == '[')) {
  if (!strncmp((const char *) type, "struct ", 7) ||
      if (!v.isEmpty() && (((const char *) v)[0] == '='))
    if (!v.isEmpty() && (((const char *) v)[0] == '='))
	    if (!v.isEmpty() && (((const char *) v)[0] == '='))
	if (!v.isEmpty() && (((const char *) v)[0] == '='))
  imageButton = new QPixmap((const char **) image_button);
ImageCanvas * ImageCanvas::read(char * & st, UmlCanvas * canvas, char * k)
	    import += (((const char *) import)[import.length() - 1] == '.')
  initialBigPixmap = new QPixmap((const char **) initial_big_pixmap);
  initialButton = new QPixmap((const char **) initial_button);
  InitialIcon = new QPixmap((const char **) initial_xpm);
  InitialMarkedIcon = new QPixmap((const char **) initialmarked_xpm);
  initialPixmap = new QPixmap((const char **) initial_pixmap);
inline void Builtin::set(const char * u, const char * c,
inline void Stereotype::set(const char * u, const char * c,
  innerPixmap = new QPixmap((const char **) inner_xpm);
  int cx = (int) (x() + (width() - zoom * EXPANSIONNODE_WIDTH) / 2);
  InterfaceIcon = new QPixmap((const char **) interface_xpm);
  interruptibleactivityregionButton = new QPixmap((const char **) interruptibleactivityregion_button);
  InterruptibleActivityRegionIcon = new QPixmap((const char **) interruptibleactivityregion_xpm);
  InterruptibleActivityRegionMarkedIcon = new QPixmap((const char **) interruptibleactivityregionmarked_xpm);
    int find(const char *, int index = 0) const;
int main(int argc, char ** argv)
int main(int argc, char ** argv)
int new_place(IdDict<void> & d, int user_id, void * x)
int Package::file_number(QString path, bool rec, const char * ext)
  int * pint;
int place(IdDict<void> & d, int id, void * x)
int SharedStr::find(const char * s, int index) const
	int startangle = a->get_point(1).x(); // degree * 16
int ToolCom::run(const char * cmd, BrowserNode * bn,
  int ty = (int) (y() - zoom * EXPANSIONNODE_HEIGHT / 2);
    javaannotation = (const char *) a->java_annotation;
  javaannotation = (const char *) c->java_annotation;
    javaannotation = (const char *) oper->java_annotation;
  java_def.assign((const char *) model->java_def, FALSE);
      java_path = get_path((const char *) pd->get_java_dir(),
  joinButton = new QPixmap((const char **) join_button);
  joinForkBigPixmap = new QPixmap((const char **) joinfork_big_pixmap);
  joinForkHorizBigPixmap = new QPixmap((const char **) joinfork_horiz_big_pixmap);
  joinForkHorizPixmap = new QPixmap((const char **) joinfork_horiz_pixmap);
  joinForkPixmap = new QPixmap((const char **) joinfork_pixmap);
  JoinIcon = new QPixmap((const char **) join_xpm);
  JoinMarkedIcon = new QPixmap((const char **) joinmarked_xpm);
  junctionBigPixmap = new QPixmap((const char **) junction_big_pixmap);
  junctionButton = new QPixmap((const char **) junction_button);
  JunctionIcon = new QPixmap((const char **) junction_xpm);
  JunctionMarkedIcon = new QPixmap((const char **) junctionmarked_xpm);
  junctionPixmap = new QPixmap((const char **) junction_pixmap);
LabelCanvas * LabelCanvas::read(char * & st, UmlCanvas * canvas, char * k)
  leftPixmap = new QPixmap((const char **) left_xpm);
  leftUnavailablePixmap = new QPixmap((const char **) left_un_xpm);
	  /* lgfreitas: Append the root path as a root package */
  /* [lgfreitas] Fixing bug 3153814 and 3153824 where MDI config was lost and artifact outline were lost */
  /* lgfreitas: If the package/path has files step thru them */
/* lgfreitas: Represents a UML package */
/* [lgfreitas] This class provides the tree view in the left side */
	/* lgfreitas: This does the reversing of files */
	/* lgfreitas: This is where the reversing happens */
  /* lgfreitas: This just counts the packages */
  /* lgfreitas: Tries to open the lexical analyzer */
	/* lgfreitas: We are building a class here, so get the class name */
  LightBluePixmap = new QPixmap((const char **) lightblue_xpm);
  LightGrayPixmap = new QPixmap((const char **) lightgray_xpm);
  LightGreenPixmap = new QPixmap((const char **) lightgreen_xpm);
  LightMagentaPixmap = new QPixmap((const char **) lightmagenta_xpm);
  LightMediumBluePixmap = new QPixmap((const char **) lightmediumblue_xpm);
  LightMediumGreenPixmap = new QPixmap((const char **) lightmediumgreen_xpm);
  LightOrangePixmap = new QPixmap((const char **) lightorange_xpm);
  LightRedPixmap = new QPixmap((const char **) lightred_xpm);
  LightYellowPixmap = new QPixmap((const char **) lightyellow_xpm);
    LineEdit(const QString & s, QWidget * parent, const char * name=0);
LineEdit::LineEdit(const QString & s, QWidget * parent, const char * name)
LineGeometry line_geometry(const char * s)
  lostasyncmsgButton = new QPixmap((const char **) lostasyncmsg_button);
  lostsyncmsgButton = new QPixmap((const char **) lostsyncmsg_button);
  MagentaPixmap = new QPixmap((const char **) magenta_xpm);
    MayBeSharedStr & operator=(const char *) {
    m = (const char *) explicit_msg;
  MediumBluePixmap = new QPixmap((const char **) mediumblue_xpm);
  MediumGreenPixmap = new QPixmap((const char **) mediumgreen_xpm);
  MediumYellowPixmap = new QPixmap((const char **) mediumyellow_xpm);
  memcpy(s, (const char *) clipboard, clipboard.length() + 1);
  mergeButton = new QPixmap((const char **) merge_button);
  MergeIcon = new QPixmap((const char **) merge_xpm);
  MergeMarkedIcon = new QPixmap((const char **) mergemarked_xpm);
  MidMagentaPixmap = new QPixmap((const char **) midmagenta_xpm);
  MidRedPixmap = new QPixmap((const char **) midred_xpm);
  mod =  (const char *)
MultiLineEdit::MultiLineEdit(QWidget * w, const char * name)
    MultiLineEdit(QWidget * w, const char * name=0);
    MyInputDialog(const char * title, const QString & msg,
MyInputDialog::MyInputDialog(const char * title, const QString & msg,
    MyStr(const char *);
MyStr::MyStr(const char * s) {
MyStr & MyStr::operator=(const char * s) {
    MyStr & operator=(const char *);
    MyTable(int numRows, int numCols, QWidget * parent = 0, const char * name = 0)
    MyTable(QWidget * parent = 0, const char * name = 0) 
      n = (const char *) name;
  NeedChange(IdDict<void> & d, int & id, void * e) : dict(d), ident(id), elt(e) {}
	  new_params[index].set_default_value((dflt.isEmpty()) ? "" : (const char *) dflt);
  noteButton = new QPixmap((const char **) note_button);
NoteCanvas * NoteCanvas::read(char * & st, UmlCanvas * canvas, char * k)
// note : 'QDataStream >> char *' bugged on windows
					NULL); // [lgfreitas] expected const char *. QString::null does not correspond to old null
  ObjectDiagramIcon = new QPixmap((const char **) objdiagram_xpm);
ObjectLinkCanvas * ObjectLinkCanvas::read(char * & st, UmlCanvas * canvas, char * k)
  OldPackageIcon = new QPixmap((const char **) old_package_xpm);
    OperationListDialog(const char * m, Q3PtrList<BrowserOperation> & l);
OperationListDialog::OperationListDialog(const char * m,
    operator const char *() const { return p; };
    operator const char *() const { return (p != 0) ? p : ""; };
  optwindowsizeButton = new QPixmap((const char **) optwinsize_button);
  OrangePixmap = new QPixmap((const char **) orange_xpm);
  OtherPackageIcon = new QPixmap((const char **) other_package_xpm);
  PackageAttributeIcon = new QPixmap((const char **) packageattribute_xpm);
  packageButton = new QPixmap((const char **) package_button);
PackageCanvas * PackageCanvas::read(char * & st, UmlCanvas * canvas, char * k) {
  PackageEmbeddedClassIcon = new QPixmap((const char **) packageembeddedclass_xpm);
  PackageEmbeddedTemplateIcon = new QPixmap((const char **) packageembeddedtemplate_xpm);
  PackageIcon = new QPixmap((const char **) package_xpm);
  PackageOperationIcon = new QPixmap((const char **) packageoperation_xpm);
Package::Package(Package * parent, const char * p, const char * n)
    Package(Package * parent, const char * p, const char * n);
  PackageRelationIcon = new QPixmap((const char **) packagerelation_xpm);
  ParameterIcon = new QPixmap((const char **) parameter_xpm);
  ParameterSetIcon = new QPixmap((const char **) parameterset_xpm);
  ParameterSetMarkedIcon = new QPixmap((const char **) parametersetmarked_xpm);
	  params[rank].set_default_value((dflt.isEmpty()) ? "" : (const char *) dflt);
  php_classes.insert((const char *) cl->text(0), cl);
  php_def.assign((const char *) model->php_def, FALSE);
      php_path = get_path((const char *) pd->get_php_dir(),
  pinButton = new QPixmap((const char **) pin_button);
  PinIcon = new QPixmap((const char **) pin_xpm);
  PinMarkedIcon = new QPixmap((const char **) pinmarked_xpm);
	/* pins changed */	\
    printf("critical\n%s\n%s\n", (const char *) caption, (const char *) text);
    printf("information\n%s\n%s\n", (const char *) caption, (const char *) text);
    printf("warning\n%s\n%s\n", (const char *) caption, (const char *) text);
  PrivateAttributeIcon = new QPixmap((const char **) privateattribute_xpm);
  PrivateEmbeddedClassIcon = new QPixmap((const char **) privateembeddedclass_xpm);
  PrivateEmbeddedTemplateIcon = new QPixmap((const char **) privateembeddedtemplate_xpm);
  PrivateOperationIcon = new QPixmap((const char **) privateoperation_xpm);
  PrivateRelationIcon = new QPixmap((const char **) privaterelation_xpm);
  ProfileIcon = new QPixmap((const char **) profile_xpm);
    Progress(int, const char *);
    Progress(int, const char *, QApplication *);
Progress::Progress(int n, const char * lbl)
Progress::Progress(int n, const char * lbl, QApplication * a)
  ProtectedAttributeIcon = new QPixmap((const char **) protectedattribute_xpm);
  ProtectedEmbeddedClassIcon = new QPixmap((const char **) protectedembeddedclass_xpm);
  ProtectedEmbeddedTemplateIcon = new QPixmap((const char **) protectedembeddedtemplate_xpm);
  ProtectedOperationIcon = new QPixmap((const char **) protectedoperation_xpm);
  ProtectedPackageIcon = new QPixmap((const char **) protected_package_xpm);
  ProtectedRelationIcon = new QPixmap((const char **) protectedrelation_xpm);
  providedButton = new QPixmap((const char **) provided_button);
  providedPixmap = new QPixmap((const char **) provided_xpm);
  PublicAttributeIcon = new QPixmap((const char **) publicattribute_xpm);
  PublicEmbeddedClassIcon = new QPixmap((const char **) publicembeddedclass_xpm);
  PublicEmbeddedTemplateIcon = new QPixmap((const char **) publicembeddedtemplate_xpm);
  PublicOperationIcon = new QPixmap((const char **) publicoperation_xpm);
  PublicRelationIcon = new QPixmap((const char **) publicrelation_xpm);
    pythondecorator = (const char *) oper->python_decorator;
  python_def.assign((const char *) model->python_def, FALSE);
      python_path = get_path((const char *) pd->get_python_dir(),
	    Q3CString cmd, const char * end_if)
Q3CString current_indent(const char * p, const char * begin)
    Q3CString d = (const char *) GenerationSettings::cpp_default_oper_decl();
    Q3CString d = (const char *) GenerationSettings::idl_default_oper_decl();
    Q3CString d = (const char *) GenerationSettings::java_default_oper_def();
    Q3CString d = (const char *) GenerationSettings::php_default_oper_def();
    Q3CString d = (const char *) GenerationSettings::python_default_oper_def();
  Q3CString newcst = (const char *) newst;
			       Q3CString str_actuals, const char * k);
			      Q3CString str_actuals, const char * k)
		       Q3GroupBox * bg, const char * cpp_update_slot, 
		       Q3GroupBox * bg, const char * idl_update_slot, 
			Q3GroupBox * bg, const char * java_update_slot, 
		       Q3GroupBox * bg, const char * php_update_slot, 
			  Q3GroupBox * bg, const char * python_update_slot, 
    : Q3MainWindow(UmlWindow::get_workspace(), (const char *) s, Qt::WDestructiveClose),
			    Q3PtrList<RelationData> & l, int * rev) const {
Q3ValueList<PinDescr> ChangeVariableValueAction::pins(const char * str) const {
  Q3ValueList<PinDescr> pins(const char * str) const;
  Q3ValueList<PinDescr> pins(UmlParamDirection, const char * str) const;
    QLOG_INFO() <<"define var '" << ((const char *) name) << "' followed by '" << ((const char *) s) << "'\n";
    QLOG_INFO() <<"UmlCom::read " << ((((unsigned char *) buffer_in)[0] << 24) + (((unsigned char *) buffer_in)[1] << 16) +(((unsigned char *) buffer_in)[2] << 8) +((unsigned char *) buffer_in)[3]) << " bytes\n";
    QLOG_INFO() <<"value form is '" << ((const char *) value) << "'\n";
    QPixmap bottom((const char **) align_bottom);
  QPixmap bp((const char **) bp_xpm);
    QPixmap center((const char **) align_center);
QPixmap * get_pixmap(const char * path);
QPixmap * get_pixmap(const char * path)
QPixmap * get_pixmap(const char * path, double zoom);
QPixmap * get_pixmap(const char * path, double zoom)
    QPixmap hcenter((const char **) align_hcenter);
  QPixmap hv((const char **) geometry_hv);
  QPixmap hvh((const char **) geometry_hvh);
    QPixmap left((const char **) align_left);
  QPixmap pomme_xpm((const char **) pomme);
    QPixmap right((const char **) align_right);
    QPixmap top((const char **) align_top);
    QPixmap vcenter((const char **) align_vcenter);
  QPixmap vh((const char **) geometry_vh);
  QPixmap vhv((const char **) geometry_vhv);
QString abs_file_path(int id, const char * ext)
  QString a = (const char *) args;
QString BrowserOperation::compute_name(const char * name_spec) const {
    QString compute_name(const char * name_spec) const;
    ? QString((const char *) explicit_type)
		     : QString((const char *) explicit_type); 
	? QString(((const char *) *it) + 1)
    : QString((const char *) name);
							 : QString((const char *) t.explicit_type),
      + QString(" : ") + ((const char *) type.get_type());
QString MyInputDialog::getText(const char * title, const QString & msg,
QString operator+(const char * s1, const MyStr & s2);
QString operator+(const char * s1, const MyStr & s2)
QString operator+(const MyStr & s1, const char * s2);
QString operator+(const MyStr & s1, const char * s2)
      QString r = ((const char *) browser_node->get_name());
  QString s = (const char *) bn->name;
  QString s = (const char *) name;
    QString s = (const char *) name_spec;
QString toUnicode(const char * str)
    r += ((const char *) browser_node->get_name())
	  r += (const char *) init_value;
    r = ((const char *) s) + 2;
    read_buffer((((unsigned char *) buffer_in)[0] << 24) +
  realizeButton = new QPixmap((const char **) realize_button);
  RedPixmap = new QPixmap((const char **) red_xpm);
  regionButton = new QPixmap((const char **) region_button);
  RegionIcon = new QPixmap((const char **) region_xpm);
    RelatedElementsDialog(BrowserNode *, const char * what,
RelatedElementsDialog::RelatedElementsDialog(BrowserNode * e, const char * what,
RelationCanvas * RelationCanvas::read(char * & st, UmlCanvas * canvas, char * k)
RelationData * RelationData::read(char * & st, char * & k,
  requiredButton = new QPixmap((const char **) required_button);
      result = new BrowserPseudoState(c, (allow_empty(c)) ? "" : (const char *) read_string(st),
  result->set_name((const char *) name);
    result->set_name((name.isEmpty()) ? get_name() : (const char *) name);
  result->set_name((name.isEmpty()) ? get_name() : (const char *) name);
  return assign((const char *) s, s.length(), share);
  return *_children;
    return (const char *) 
    return ((const char *) s) + 1;
  return (((const char *) s1) == ((const char *) s2)) ||
  return (((const char *) s1) != ((const char *) s2)) &&
    return *_context.pointer++;
      return *it;
  returnmsgButton = new QPixmap((const char **) returnmsg_button);
    return *new_contains != 0;
  return *new_contains != 0;
  return *p_buffer_in++;
  return *p_buffer_in++ != 0;
      return QString((const char *) a.role) + " (" + get_name() + ")";
      return QString((const char *) b.role) + " (" + get_name() + ")";
    return QString((const char *) name);
  return QString((const char *) s1) + s2;
    return read((const char *) fn);
  return read_stereotypes((const char *) fn);
  return s1 + QString((const char *) s2);
  return !strcmp((const char *) s1, (const char *) s2);
  return strcmp((const char *) s1, (const char *) s2);
  return (strcmp(((const char *) s1), (const char *) s2) == 0);
  return (strcmp(((const char *) s1), (const char *) s2) != 0);
  return (strcmp((const char *) s1, ((const char *) s2)) == 0);
  return (strcmp((const char *) s1, ((const char *) s2)) != 0);
  return !strcmp((const char *) s1, s2);
  return strcmp((const char *) s1, s2);
  return (strcmp(((const char *) s1), s2) == 0);
  return (strcmp(((const char *) s1), s2) != 0);
  return !strcmp(s1, (const char *) s2);
  return strcmp(s1, (const char *) s2);
  return (strcmp(s1, ((const char *) s2)) == 0);
  return (strcmp(s1, ((const char *) s2)) != 0);
  return *this;
		return *this;
    return (((unsigned char *) p)[-4] << 24) +
  return (((unsigned char *) p_buffer_in)[-4] << 24) +
	return *v;
  rightPixmap = new QPixmap((const char **) right_xpm);
  rightUnavailablePixmap = new QPixmap((const char **) right_un_xpm);
  RoFreePackageIcon = new QPixmap((const char **) ro_free_package_xpm);
  role.javaannotation = (const char *) rel.java_annotation;
  role.previous_multiplicity = (const char *) rel.multiplicity;
  RoOtherPackageIcon = new QPixmap((const char **) ro_other_package_xpm);
  RoProtectedPackageIcon = new QPixmap((const char **) ro_protected_package_xpm);
  RoUserPackageIcon = new QPixmap((const char **) ro_user_package_xpm);
	  r += " [" + QString((const char *) multiplicity) + "]";
    s.append((((const char *) s)[s.length() - 1] == '\n')
 * Save, Close, etc... It is the main window */
    s = (const char *) art->cpp_def;
    s = (const char *) name;
SdClassInstCanvas * SdClassInstCanvas::read(char * & st, UmlCanvas * canvas, char * k)
SdContinuationCanvas * SdContinuationCanvas::read(char * & st, UmlCanvas * canvas, char * k)
SdDurationCanvas * SdDurationCanvas::read(char * & st, UmlCanvas * canvas, char * k)
SdMsgCanvas * SdMsgCanvas::read(char * & st, UmlCanvas * canvas, char * k)
SdSelfMsgCanvas * SdSelfMsgCanvas::read(char * & st, UmlCanvas * canvas, char * k)
  selectButton = new QPixmap((const char **) select_button);
  selflinkButton = new QPixmap((const char **) selflink_button);
  selfreturnmsgButton = new QPixmap((const char **) selfreturnmsg_button);
		send_cmd(f, cmd, (const char *) s);
		send_cmd(f, cmd, (const char *) s, b);
		send_cmd(f, cmd, (const char *) s, (const char) * v);
		send_cmd(id, cmd, (const char *) arg);
		send_cmd(id, cmd, (const char *) arg1, (const char *) arg2);
  SeqDiagramIcon = new QPixmap((const char **) seqdiagram_xpm);
	set_lang((const char *) lang);
      setText(0, (const char *) name);
						set_user_id((int) ((unsigned char *) p)[1]);
	s = "from " + s_art + " import *";
  shallowHistoryBigPixmap = new QPixmap((const char **) shallowhistory_big_pixmap);
  shallowhistoryButton = new QPixmap((const char **) shallowhistory_button);
  ShallowHistoryIcon = new QPixmap((const char **) shallowhistory_xpm);
  ShallowHistoryMarkedIcon = new QPixmap((const char **) shallowhistorymarked_xpm);
  shallowHistoryPixmap = new QPixmap((const char **) shallowhistory_pixmap);
    SharedStr & operator=(const char *);
    SharedStr & operator=(const SharedStr & s) { p = s.p; return *this; };
SharedStr & SharedStr::operator=(const char * s) {
ShowContextMode context_mode(const char * s)
  signalinButton = new QPixmap((const char **) signalin_button);
  SignalInIcon = new QPixmap((const char **) signalin_xpm);
  SignalInMarkedIcon = new QPixmap((const char **) signalinmarked_xpm);
  signaloutButton = new QPixmap((const char **) signalout_button);
  SignalOutIcon = new QPixmap((const char **) signalout_xpm);
  SignalOutMarkedIcon = new QPixmap((const char **) signaloutmarked_xpm);
SimpleRelationCanvas * SimpleRelationCanvas::read(char * & st, UmlCanvas * canvas, char * k)
  SimpleRelationIcon = new QPixmap((const char **) simplerelation_xpm);
	    s.insert(index, (const char *) ("import " + import));
	  s.insert(index, (const char *)("import static" + Q3CString((*it).toAscii().constData()) + '\n'));
  s.insert(p - ps, (const char *)tm);
      (sscanf((const char *) ed_id->text(), "%d", &id) != 1) ||
	(sscanf((const char *) text(row, 1), "${t%d}", &t_i) != 1))
      (sscanf((const char *) text(row, 1), "${t%u}", &t_i) == 1))
	(sscanf((const char *) text(row, 2), "${p%d}", &p_i) != 1))
      (sscanf((const char *) text(row, 2), "${p%u}", &p_i) == 1))
	(sscanf((const char *) text(row, 2), "${t%d}", &t_i) != 1))
      (sscanf((const char *) text(row, 2), "${t%u}", &t_i) == 1))
	(sscanf((const char *) text(row, 3), "${p%d}", &p_i) != 1))
      (sscanf((const char *) text(row, 3), "${p%u}", &p_i) == 1))
	(sscanf((const char *) text(row, 3), "${t%d}", &t_i) != 1))
	(sscanf((const char *) text(row, 4), "${p%d}", &p_i) != 1))
      (sscanf((const char *) text(row, 4), "${p%u}", &p_i) == 1))
	(sscanf((const char *) text(row, 4), "${v%d}", &v_i) != 1))
	(sscanf((const char *) text(row, 5), "${v%d}", &v_i) != 1))
  stateButton = new QPixmap((const char **) state_button);
  StateDiagramIcon = new QPixmap((const char **) statediagram_xpm);
  StateIcon = new QPixmap((const char **) state_xpm);
    static ActivityActionCanvas * read(char * &, UmlCanvas *, char *);
    static ActivityCanvas * read(char * &, UmlCanvas *, char *);
    static ActivityNodeCanvas * read(char * &, UmlCanvas *, char *);
    static ActivityObjectCanvas * read(char * &, UmlCanvas * canvas, char *);
    static ActivityPartitionCanvas * read(char * &, UmlCanvas *, char *);
    static ArrowCanvas * read(char * & st, UmlCanvas * canvas, char * k);
    static ArrowJunctionCanvas * read(char * & st, UmlCanvas * canvas, char * k);
    static ArrowPointCanvas * read(char * & st, UmlCanvas * canvas, char * k);
    static ArtifactCanvas * read(char * &, UmlCanvas *, char *);
    static AssocContainCanvas * read(char * & st, UmlCanvas * canvas, char * k);
    static bool gt(const char * h1, const char * h2);
    static bool identifierp(const char *);
    static bool identifierp(const char *, bool strictp);
    static bool lt(const char * h1, const char * h2);
    static bool must_be_saved(const char * path, const char * new_contains);
    static bool must_be_saved(const char * path, const char * new_contains);
    static bool read(const char * = 0);
static bool read_incl(IncludesSpec & sp, const char * filename)
    static bool read_stereotypes(const char * = 0);
    static bool set_AttributeDecl(const char * multiplicity, Q3CString v);
    static bool set_ConstDecl(const char * multiplicity, Q3CString v);
    static bool set_IndentStep(const char *);
    static bool set_RelationDecl(bool by_value, const char * multiplicity, const char * v);
    static bool set_RelationDecl(bool composition, const char * multiplicity, Q3CString v);
    static bool set_RelationDecl(const char * multiplicity, Q3CString v);
    static bool set_UnionItemDecl(const char * multiplicity, Q3CString v);
    static bool set_UnionRelationDecl(const char * multiplicity, Q3CString v);
    static bool set_ValuetypeAttributeDecl(const char * multiplicity, Q3CString v);
    static bool set_ValuetypeRelationDecl(const char * multiplicity, Q3CString v);
    static bool star(const char *);
    static bool tool_global_cmd(ToolCom * com, const char * args);
    static bool tool_global_cpp_cmd(ToolCom * com, const char * args);
    static bool tool_global_idl_cmd(ToolCom * com, const char * args);
    static bool tool_global_java_cmd(ToolCom * com, const char * args);
    static bool tool_global_php_cmd(ToolCom * com, const char * args);
    static bool tool_global_python_cmd(ToolCom * com, const char * args);
    static bool tool_global_uml_cmd(ToolCom * com, const char * args);
    static BrowserActivityAction * read(char * &, char *, BrowserNode *);
    static BrowserActivity * add_activity(BrowserNode * future_parent, const char * name);
    static BrowserActivityDiagram * read(char * &, char *, BrowserNode *);
    static BrowserActivityDiagram * read_ref(char * &, char *);
    static BrowserActivityNode * read(char * &, char *, BrowserNode *);
    static BrowserActivityObject * read(char * &, char *, BrowserNode *);
    static BrowserActivityPartition * add_activitypartition(BrowserNode * future_parent, const char * name);
    static BrowserActivityPartition * read(char * &, char *, BrowserNode *);
    static BrowserActivity * read(char * &, char *, BrowserNode *);
    static BrowserArtifact * find(const char * s);
    static BrowserArtifact * read(char * &, char *, BrowserNode *);
    static BrowserArtifact * read_ref(char * &, const char *);
    static BrowserAttribute * read(char * &, char *, BrowserNode *, bool force = TRUE);
static BrowserClass * add_metaclass(BrowserClass * cl, const char * mclname,
    static BrowserClassDiagram * read(char * &, char *, BrowserNode *);
    static BrowserClassDiagram * read_ref(char * &, const char *);
    static BrowserClass * find(const char * s);
    static BrowserClassInstance * read(char * &, char *, BrowserNode *);
    static BrowserClass * read(char * &, char *, BrowserNode *, bool force = TRUE);
    static BrowserClass * read_ref(char * &, const char * k = 0);
    static BrowserClassView * read(char * &, char *, BrowserNode *, bool);
    static BrowserColDiagram * read(char * &, char *, BrowserNode *);
    static BrowserComponentDiagram * read(char * &, char *, BrowserNode *);
    static BrowserComponentDiagram * read_ref(char * &, char *);
    static BrowserComponent * read(char * &, char *, BrowserNode *);
    static BrowserComponent * read_ref(char * &, const char *);
    static BrowserComponentView * read(char * &, char *, BrowserNode *, bool);
    static BrowserComponentView * read_ref(char * &, char *);
    static BrowserDeploymentDiagram * read(char * &, char *, BrowserNode *);
    static BrowserDeploymentDiagram * read_ref(char * &, const char *);
    static BrowserDeploymentNode * read(char * &, char *, BrowserNode *);
    static BrowserDeploymentView * read(char * &, char *, BrowserNode *, bool);
    static BrowserDeploymentView * read_ref(char * &, const char *);
    static BrowserExpansionNode * read(char * &, char *, BrowserNode *);
    static BrowserExpansionRegion * add_expansionregion(BrowserNode * future_parent, const char * name);
    static BrowserExpansionRegion * read(char * &, char *, BrowserNode *);
    static BrowserExtraMember * read(char * &, char *, BrowserNode *);
    static BrowserFlow * read(char * &, char *, BrowserNode *);
    static BrowserInterruptibleActivityRegion * add_interruptibleactivityregion(BrowserNode * future_parent, const char * name);
    static BrowserInterruptibleActivityRegion * read(char * &, char *, BrowserNode *);
    static BrowserNode * get_it(const char * k, int id);
    static BrowserNodeList & instances(BrowserNodeList &, const char * st = 0);
    static BrowserNodeList & instances(BrowserNodeList &, const char * st = 0, bool non_nested = FALSE);
    static BrowserNode * read_any_ref(char * &, char *);
    static BrowserNode * read_any_ref(char * & st, char * k);
    static BrowserObjectDiagram * read(char * &, char *, BrowserNode *);
    static BrowserObjectDiagram * read_ref(char * & st, char * k);
    static BrowserOperation * read(char * &, char *, BrowserNode *, bool force = TRUE);
    static BrowserPackage * read(char * &, char *, BrowserNode *, bool);
    static BrowserParameter * read(char * &, char *, BrowserNode *);
    static BrowserParameterSet * new_one(const char *, BrowserNode * p);
    static BrowserParameterSet * read(char * &, char *, BrowserNode *);
    static BrowserPin * new_one(BrowserNode * future_parent, const char * name);
    static BrowserPin * read(char * &, char *, BrowserNode *);
    static BrowserPseudoState * read(char * &, char *, BrowserNode *);
    static BrowserRegion * read(char * &, char *, BrowserNode *);
    static BrowserRelation * read(char * &, char *, BrowserNode *, bool force = TRUE);
    static BrowserRelation * read_ref(char * &, char * k);
    static BrowserSeqDiagram * read(char * &, char *, BrowserNode *);
    static BrowserSimpleRelation * read(char * &, char *, BrowserNode *);
    static BrowserStateAction * read(char * &, char *, BrowserNode *);
    static BrowserStateDiagram * read(char * &, char *, BrowserNode *);
    static BrowserStateDiagram * read_ref(char * &, char *);
    static BrowserState * read(char * &, char *, BrowserNode *);
    static BrowserTransition * read(char * &, char *, BrowserNode *);
    static BrowserUseCaseDiagram * read(char * &, char *, BrowserNode *);
    static BrowserUseCaseDiagram * read_ref(char * & st, const char * k);
    static BrowserUseCase * read(char * &, char *, BrowserNode *);
    static BrowserUseCaseView * read(char * &, char *, BrowserNode *, bool);
    static Builtin & get_type(const char * u);
    static CdClassCanvas * read(char * &, UmlCanvas *, char *);
    static char * _buffer;
    static char * buffer_in;
    static char * buffer_in_end;
    static char * buffer_out;
    static char * p_buffer_in;
    static char * p_buffer_out;
static char * read_file(const char * filename)
    static char * set_bodies_info(BrowserClass * cl, int id);
    static CodClassInstCanvas * read(char * &, UmlCanvas * canvas, char *);
    static CodDirsCanvas * read(char * & st, UmlCanvas * canvas, char * & k);
    static CodLinkCanvas * read(char * & st, UmlCanvas * canvas, char * & k);
    static CodSelfLinkCanvas * read(char * & st, UmlCanvas * canvas, char * & k);
    static ComponentCanvas * read(char * &, UmlCanvas *, char *);
static const char * bypass_body(const char * p)
  static const char * cmds[] = {
    static const char * command(const char *);
    static const char * command(int rank);
static const char * component2artifact(const char * b)
  static const char * const cmds[] = {
  static const char * const kinds[] = {
  static const char * const ss[] = { "", "  ", "    ", "      " };
    static const char * cpp_default_attr_decl(const QString & mult);
    static const char * cpp_default_class_decl() { return cpp_class_decl; };
    static const char * cpp_default_enum_decl() { return cpp_enum_decl; };
    static const char * cpp_default_enum_item_decl() { return cpp_enum_item_decl; };
    static const char * cpp_default_external_class_decl() { return cpp_external_class_decl; };
    static const char * cpp_default_get_name() { return cpp_get_name; };
    static const char * cpp_default_header_content() { return cpp_h_content; };
    static const char * cpp_default_oper_decl() { return cpp_oper_decl; };
    static const char * cpp_default_oper_def() { return cpp_oper_def; };
    static const char * cpp_default_rel_decl(UmlCode rel, const QString & mult);
    static const char * cpp_default_set_name() { return cpp_set_name; };
    static const char * cpp_default_source_content() { return cpp_src_content; };
    static const char * cpp_default_struct_decl() { return cpp_struct_decl; };
    static const char * cpp_default_typedef_decl() { return cpp_typedef_decl; };
    static const char * cpp_default_union_decl() { return cpp_union_decl; };
static const char * DefaultAnnotations[] = {
static const char * DefaultDecorators[] = {
    static const char * get_idlcase(const RoleData & role);
static const char * get_indent(Q3ComboBox * cb)
    static const char * idl_default_attr_decl(const QString & mult);
    static const char * idl_default_const_decl(const QString & mult);
    static const char * idl_default_enum_decl() { return idl_enum_decl; };
    static const char * idl_default_enum_item_decl() { return idl_enum_item_decl; };
    static const char * idl_default_exception_decl() { return idl_exception_decl; };
    static const char * idl_default_external_class_decl() { return idl_external_class_decl; };
    static const char * idl_default_get_name() { return idl_get_name; };
    static const char * idl_default_interface_decl() { return idl_interface_decl; };
    static const char * idl_default_oper_decl() { return idl_oper_decl; };
    static const char * idl_default_rel_decl(const QString & mult);
    static const char * idl_default_set_name() { return idl_set_name; };
    static const char * idl_default_source_content() { return idl_src_content; };
    static const char * idl_default_struct_decl() { return idl_struct_decl; };
    static const char * idl_default_typedef_decl() { return idl_typedef_decl; };
    static const char * idl_default_union_decl() { return idl_union_decl; };
    static const char * idl_default_union_item_decl(const QString & mult);
    static const char * idl_default_union_rel_decl(const QString & mult);
    static const char * idl_default_valuetype_attr_decl(const QString & mult);
    static const char * idl_default_valuetype_decl() { return idl_valuetype_decl; };
    static const char * idl_default_valuetype_rel_decl(const QString & mult);
    static const char * java_default_attr_decl(const QString & mult);
    static const char * java_default_class_decl() { return java_class_decl; };
    static const char * java_default_enum_decl() { return java_enum_decl; };
    static const char * java_default_enum_item_decl() { return java_enum_item_decl; };
    static const char * java_default_enum_pattern_decl() { return java_enum_pattern_decl; };
    static const char * java_default_enum_pattern_item_case() { return java_enum_pattern_item_case; };
    static const char * java_default_enum_pattern_item_decl() { return java_enum_pattern_item_decl; };
    static const char * java_default_external_class_decl() { return java_external_class_decl; };
    static const char * java_default_get_name() { return java_get_name; };
    static const char * java_default_interface_decl() { return java_interface_decl; };
    static const char * java_default_oper_def() { return java_oper_def; };
    static const char * java_default_rel_decl(const QString & mult);
    static const char * java_default_set_name() { return java_set_name; };
    static const char * java_default_source_content() { return java_src_content; };
    static const char * php_default_attr_decl() { return php_attr_decl; }
    static const char * php_default_class_decl() { return php_class_decl; };
    static const char * php_default_enum_decl() { return php_enum_decl; };
    static const char * php_default_enum_item_decl() { return php_enum_item_decl; };
    static const char * php_default_external_class_decl() { return php_external_class_decl; };
    static const char * php_default_get_name() { return php_get_name; };
    static const char * php_default_interface_decl() { return php_interface_decl; };
    static const char * php_default_oper_def() { return php_oper_def; };
    static const char * php_default_rel_decl() { return php_rel_decl; }
    static const char * php_default_set_name() { return php_set_name; };
    static const char * php_default_source_content() { return php_src_content; };
    static const char * python_default_attr_decl(const QString & mult);
    static const char * python_default_class_decl() { return python_class_decl; };
    static const char * python_default_enum_decl() { return python_enum_decl; };
    static const char * python_default_enum_item_decl() { return python_enum_item_decl; };
    static const char * python_default_external_class_decl() { return python_external_class_decl; };
    static const char * python_default_get_name() { return python_get_name; };
    static const char * python_default_initoper_def() { return python_initoper_def; };
    static const char * python_default_oper_def() { return python_oper_def; };
    static const char * python_default_rel_decl(UmlCode rel, const QString & mult);
    static const char * python_default_set_name() { return python_set_name; };
    static const char * python_default_source_content() { return python_src_content; };
    static const char * read_string();
  static const char * svg[UmlDefaultColor];
  static const char * t[][2] = {
    static const char * Triangle;
    static const char * Zigzag;
    static const Q3CString & attributeDecl(const char * multiplicity);
    static const Q3CString & constDecl(const char * multiplicity);
    static const Q3CString & relationDecl(bool by_value, const char * multiplicity);
    static const Q3CString & relationDecl(bool composition, const char * multiplicity);
    static const Q3CString & relationDecl(const char * multiplicity);
    static const Q3CString & unionItemDecl(const char * multiplicity);
    static const Q3CString & unionRelationDecl(const char * multiplicity);
    static const Q3CString & valuetypeAttributeDecl(const char * multiplicity);
    static const Q3CString & valuetypeRelationDecl(const char * multiplicity);
    static const QPixmap * browserPixmap(const char * s);
    static const QPixmap * diagramPixmap(const char * s, double zoom);
    static ConstraintCanvas * read(char * &, UmlCanvas *, char *, CdClassCanvas *);
    static DeploymentNodeCanvas * read(char * &, UmlCanvas * canvas, char *);
    static DiagramItem * dict_get(int id, const char *, UmlCanvas *);
    static ExpansionNodeCanvas * read(char * &, UmlCanvas *, char *, ExpansionRegionCanvas *);
    static ExpansionRegionCanvas * read(char * &, UmlCanvas *, char *);
    static FlowCanvas * read(char * & st, UmlCanvas * canvas, char *);
    static FlowData * read(char * &, char * & k);
    static FragmentCanvas * read(char * &, UmlCanvas *, char *);
    static HubCanvas * read(char * & st, UmlCanvas * canvas, char * k);
    static IconCanvas * read(char * &, UmlCanvas *, char *);
    static ImageCanvas * read(char * &, UmlCanvas *, char *);
    static InfoCanvas * read(char * &, UmlCanvas *, char *, DiagramItem *);
static int bypass_c_comment(const char * s, int index)
static int bypass_char(const char * s, int index)
static int bypass_cpp_comment(const char * s, int index)
static int bypass_string(const char * s, int index)
    static InterruptibleActivityRegionCanvas * read(char * &, UmlCanvas *, char *);
    static int file_number(QString path, bool rec, const char * ext);
    static int run(const char * cmd, BrowserNode *,
static int supOf(const char * s, int index)
    static LabelCanvas * read(char * & st, UmlCanvas * canvas, char *);
    static NoteCanvas * read(char * &, UmlCanvas *, char *);
    static ObjectLinkCanvas * read(char * & st, UmlCanvas * canvas, char *);
    static OdClassInstCanvas * read(char * &, UmlCanvas * canvas, char *);
    static PackageCanvas * read(char * &, UmlCanvas * canvas, char *);
    static ParameterCanvas * read(char * &, UmlCanvas *, char *, ActivityCanvas *);
    static ParameterSetCanvas * read(char * &, UmlCanvas *, char *, ActivityActionCanvas *);
    static PinCanvas * read(char * &, UmlCanvas *, char *, ActivityActionCanvas *);
    static PseudoStateCanvas * read(char * &, UmlCanvas *, char *);
static Q3CString linenumber(char * all, char * here)
static Q3Grid * mkgrid(Q3TabDialog * d, const char * name = 0)
    static Q3PtrList<Package> Choozen; /* List of chosen "packages" to reverse */
static QString add_profile(QString b, const char * comment = "//")
    static QString getText(const char * title, const QString & msg,
    static RelationCanvas * read(char * & st, UmlCanvas * canvas, char *);
    static RelationData * read(char * &, char * &, BrowserRelation *& unconsistent);
    static SdClassInstCanvas * read(char * &, UmlCanvas * canvas, char *);
    static SdContinuationCanvas * read(char * &, UmlCanvas *, char *);
    static SdDurationCanvas * read(char * & st, UmlCanvas * canvas, char *);
    static SdLostFoundMsgSupportCanvas * read(char * & st, UmlCanvas * canvas, char * k);
    static SdMsgCanvas * read(char * &, UmlCanvas *, char *);
    static SdSelfMsgCanvas * read(char * &, UmlCanvas *, char *);
    static SimpleRelationCanvas * read(char * & st, UmlCanvas * canvas, char *);
    static StateActionCanvas * read(char * &, UmlCanvas *, char *);
    static StateCanvas * read(char * &, UmlCanvas *, char *);
    static Stereotype & get_stereotype(int & n, Stereotype * & st, const char * u);
    static StereotypePropertiesCanvas * read(char * &, UmlCanvas *, char *);
    static StereotypePropertiesCanvas * read(char * &, UmlCanvas *, char *, DiagramItem *);
    static SubjectCanvas * read(char * &, UmlCanvas *, char *);
    static TextCanvas * read(char * &, UmlCanvas *, char *);
    static TransitionCanvas * read(char * & st, UmlCanvas * canvas, char *);
    static TransitionData * read(char * &, char * & k);
    static UcClassCanvas * read(char * &, UmlCanvas * canvas, char *);
    static UcUseCaseCanvas * read(char * &, UmlCanvas * canvas, char *);
    static UmlAcceptCallAction * create(UmlItem * parent, const char * s);
    static UmlAcceptEventAction * create(UmlItem * parent, const char * s);
    static UmlActivity * create(UmlClassView * parent, const char * s);
    static UmlActivityDiagram * create(UmlItem * parent, const char * s);
    static UmlActivityFinalActivityNode * create(UmlItem * parent, const char * s);
    static UmlActivityObject * create(UmlItem * parent, const char * s);
    static UmlActivityParameter * create(UmlActivityAction * parent, const char * s);
    static UmlActivityParameter * create(UmlActivity * parent, const char * s);
    static UmlActivityPartition * create(UmlItem * parent, const char * s);
    static UmlActivityPin * create(UmlActivityAction * parent, const char * s);
    static UmlAddVariableValueAction * create(UmlItem * parent, const char * s);
    static UmlArtifact * create(UmlDeploymentView * parent, const char * s);
    static UmlAttribute * create(UmlClass * parent, const char * s);
    static UmlBroadcastSignalAction * create(UmlItem * parent, const char * s);
    static UmlCallBehaviorAction * create(UmlItem * parent, const char * s);
    static UmlCallOperationAction * create(UmlItem * parent, const char * s);
    static UmlClass * create(UmlItem * parent, const char * s);
    static UmlClassDiagram * create(UmlClassView * parent, const char * s);
    static UmlClassInstance * create(UmlItem * parent, const char * name, UmlClass * type);
    static UmlClass * used(const char * n) { return Usings[n]; }
    static UmlClassView * create(UmlPackage * parent, const char * s);
    static UmlClearVariableValueAction * create(UmlItem * parent, const char * s);
    static UmlCollaborationDiagram * create(UmlItem * parent, const char * s);
    static UmlComponent * create(UmlComponentView * parent, const char * s);
    static UmlComponentDiagram * create(UmlComponentView * parent, const char * s);
    static UmlComponentView * create(UmlPackage * parent, const char * s);
    static UmlCreateObjectAction * create(UmlItem * parent, const char * s);
    static UmlDecisionActivityNode * create(UmlItem * parent, const char * s);
    static UmlDeploymentDiagram * create(UmlDeploymentView * parent, const char * s);
    static UmlDeploymentView * create(UmlPackage * parent, const char * s);
    static UmlDestroyObjectAction * create(UmlItem * parent, const char * s);
    static UmlEntryPointPseudoState * create(UmlItem * parent, const char * s);
    static UmlExitPointPseudoState * create(UmlItem * parent, const char * s);
    static UmlExpansionNode * create(UmlExpansionRegion * parent, const char * s);
    static UmlExpansionRegion * create(UmlItem * parent, const char * s);
    static UmlExtraClassMember * create(UmlClass * parent, const char * name);
    static UmlFlowFinalActivityNode * create(UmlItem * parent, const char * s);
    static UmlForkActivityNode * create(UmlItem * parent, const char * s);
    static UmlInitialActivityNode * create(UmlItem * parent, const char * s);
    static UmlInterruptibleActivityRegion * create(UmlItem * parent, const char * s);
    static UmlJoinActivityNode * create(UmlItem * parent, const char * s);
    static UmlMergeActivityNode * create(UmlItem * parent, const char * s);
    static UmlNode * create(UmlItem * parent, const char * s);
    static UmlObjectDiagram * create(UmlItem * parent, const char * s);
    static UmlOpaqueAction * create(UmlItem * parent, const char * s);
    static UmlOperation * create(UmlClass * parent, const char * s);
    static UmlPackage * create(UmlPackage * parent, const char * name);
    static UmlRaiseExceptionAction * create(UmlItem * parent, const char * s);
    static UmlReadVariableValueAction * create(UmlItem * parent, const char * s);
    static UmlReduceAction * create(UmlItem * parent, const char * s);
    static UmlRegion * create(UmlState * parent, const char * s);
    static UmlRelation * java2Php(UmlClass * php, UmlClass * java, const char * name);
    static UmlRemoveVariableValueAction * create(UmlItem * parent, const char * s);
    static UmlReplyAction * create(UmlItem * parent, const char * s);
    static UmlSendObjectAction * create(UmlItem * parent, const char * s);
    static UmlSendSignalAction * create(UmlItem * parent, const char * s);
    static UmlSequenceDiagram * create(UmlItem * parent, const char * s);
    static UmlState * create(UmlItem * parent, const char * s);
    static UmlStateDiagram * create(UmlState * parent, const char * s);
    static UmlTestIdentityAction * create(UmlItem * parent, const char * s);
    static UmlUnmarshallAction * create(UmlItem * parent, const char * s);
    static UmlUseCase * create(UmlItem * parent, const char * s);
    static UmlUseCaseDiagram * create(UmlItem * parent, const char * s);
    static UmlUseCaseView * create(UmlItem * parent, const char * s);
    static UmlValueSpecificationAction * create(UmlItem * parent, const char * s);
    static UmlWriteVariableValueAction * create(UmlItem * parent, const char * s);
    static void add(const char *);
    static void add_from_tool(BrowserNode * parent, ToolCom * com, const char * args);
static void add_ref(const char * scl, const char * sucl, const char * aa, const char * ao)
static void bypass_spaces(const char *& s)
    static void error_near(Q3CString, const char * m = "");
static void init_indent(Q3ComboBox * cb, const char * v)
    static void message(const char * s);
    static void new_one(BrowserNode * future_parent, const char * name, const PinParamData & pd);
    static void read_bodies(const char * h_path, const char * src_path);
    static void read_bodies(const char * path);
static void read_bodies(const char * path, Q3IntDict<char> & bodies)
    static void read(char * & st, char * & k);
    static void read(char * & st, char * & k, bool new_format);
    static void read_descriptions(char * & st, char * & k);
    static void read_dirs(char * & st, char * & k);
    static void * read_id();
    static void read_stereotypes(char * &, char * &);
    static void read_stereotypes(char * &, char * & k);
  static void roundtrip(const char * path, aLanguage who);
static void save_includes_imports(IncludesSpec & sp, const char * filename)
    static void send_cmd(CmdFamily f, unsigned int cmd, bool b, const char * s, const char * v);
    static void send_cmd(CmdFamily f, unsigned int cmd, const char * s);
    static void send_cmd(CmdFamily f, unsigned int cmd, const char * s, bool b);
    static void send_cmd(CmdFamily f, unsigned int cmd, const char * s, const char * v);
	static void send_cmd(CmdFamily f, unsigned int cmd, const char * s, Q3CString v) {
    static void send_cmd(CmdFamily f, unsigned int cmd, int arg, const char * dummy);
	static void send_cmd(CmdFamily f, unsigned int cmd, Q3CString s, const char * v) {
    static void send_cmd(CmdFamily f, unsigned int cmd, void * id);
    static void send_cmd(CmdFamily f, unsigned int cmd, void * id, const char * n);
    static void send_cmd(const void * id, OnInstanceCmd cmd);
    static void send_cmd(const void * id, OnInstanceCmd cmd, anItemKind arg1, aRelationKind arg2, const void * id2);
    static void send_cmd(const void * id, OnInstanceCmd cmd, anItemKind arg1, const char * arg2);
    static void send_cmd(const void * id, OnInstanceCmd cmd, anItemKind arg, const void * id2);
    static void send_cmd(const void * id, OnInstanceCmd cmd, char arg);
    static void send_cmd(const void * id, OnInstanceCmd cmd, const char * arg);
    static void send_cmd(const void * id, OnInstanceCmd cmd, const char * arg1, const char * arg2);
    static void send_cmd(const void * id, OnInstanceCmd cmd, const Q3PtrVector<UmlClass> & l1, const Q3PtrVector<UmlClass> & l2, const Q3PtrVector<UmlClass> & l3);
    static void send_cmd(const void * id, OnInstanceCmd cmd, const Q3PtrVector<UmlItem> & l);
    static void send_cmd(const void * id, OnInstanceCmd cmd, const UmlTypeSpec & arg);
    static void send_cmd(const void * id, OnInstanceCmd cmd, const void * id1);
    static void send_cmd(const void * id, OnInstanceCmd cmd, const void * id1, const char * arg2);
	static void send_cmd(const void * id, OnInstanceCmd cmd, Q3CString arg) {
	static void send_cmd(const void * id, OnInstanceCmd cmd, Q3CString arg1, Q3CString arg2) {
    static void send_cmd(const void * id, OnInstanceCmd cmd, unsigned int arg);
    static void send_cmd(const void * id, OnInstanceCmd cmd, unsigned int arg1, char arg2, const char * arg3, const char * arg4, const UmlTypeSpec & arg5);
    static void send_cmd(const void * id, OnInstanceCmd cmd, unsigned int arg1, const char * arg2, const char * arg3, const UmlTypeSpec & arg4, const UmlTypeSpec & arg5);
    static void send_cmd(const void * id, OnInstanceCmd cmd, unsigned int arg1, const UmlTypeSpec & arg2);
    static void set_include(IncludesSpec & is, ToolCom * com, const char * args);
    static void skip(ToolCom * com, const char *& args);
    static void trace(const char * s);
    static void unread_word(const char * s);
    static void write_id(const void * id);
    static void write_string(const char * p);
	  st << " // " << (const char *) pack->full_name();
  stereotype = *((const char *) st);
  StereotypeIcon = new QPixmap((const char **) stereotype_xpm);
  StereotypePropertiesCanvas::read(char * & st, UmlCanvas * canvas, char * k)
  st << " // multiplicity * a..b";
      strchr(((const char *) body) + index + BodyPrefixLength, '\n');
    (strcmp(((const char *) s1), ((const char *) s2)) != 0);
      !strcmp(k, "drawn_as_icon") /* old format */) {
    st << "relation_ref " << get_ident() << " // " << ((const char *) name);
      !strncmp((const char *) type, "enum ", 5)) {
      !strncmp((const char *) type, "union ", 6) ||
  subjectButton = new QPixmap((const char **) subject_button);
SubjectCanvas * SubjectCanvas::read(char * & st, UmlCanvas * canvas, char * k)
    switch (((const char *) s)[index1 + 1]) {
    switch (((const char *) s)[index1 + 1]) {
  syncmsgButton = new QPixmap((const char **) syncmsg_button);
  syncselfmsgButton = new QPixmap((const char **) syncselfmsg_button);
    t = (const char *) type.explicit_type;
  TemplateIcon = new QPixmap((const char **) template_xpm);
  terminateBigPixmap = new QPixmap((const char **) terminate_big_pixmap);
  terminateButton = new QPixmap((const char **) terminate_button);
  TerminateIcon = new QPixmap((const char **) terminate_xpm);
  TerminateMarkedIcon = new QPixmap((const char **) terminatemarked_xpm);
  terminatePixmap = new QPixmap((const char **) terminate_pixmap);
  textButton = new QPixmap((const char **) text_button);
TextCanvas * TextCanvas::read(char * & st, UmlCanvas * canvas, char * k)
    /* the four first bytes of buffer_out are free to contains the length */
     these are taken into account by len */
/* This class is the base for every node presented in the tree-view on the left */
/* This is the window with the class diagram */
	/* This links us to the diagram in the browser */
    /* This part defines the buttons on the toolbar */
/* This represents a class diagram in the browser tree */
/* This represents a window that is a diagram, have a canvas and a toolbox */
/* This will open a class diagram window */
	ToolCom::run((const char *) cmd, bn, FALSE, FALSE);
TransitionCanvas * TransitionCanvas::read(char * & st, UmlCanvas * canvas, char * k)
TransitionData * TransitionData::read(char * & st, char * & k)
    TreeItem(TreeItem * parent, const char * n);
TreeItem::TreeItem(TreeItem * parent, const char * n) {
	      ts.writeRawBytes((const char *) path, path.length());
UcClassCanvas * UcClassCanvas::read(char * & st, UmlCanvas * canvas, char * k)
UcUseCaseCanvas * UcUseCaseCanvas::read(char * & st, UmlCanvas * canvas, char * k)
Uml3States state(const char * s)
UmlAcceptCallAction * UmlBaseAcceptCallAction::create(UmlItem * parent, const char * s)
UmlAcceptEventAction * UmlBaseAcceptEventAction::create(UmlItem * parent, const char * s)
UmlActionKind activity_action_kind(const char * s)
UmlActivityDiagram * UmlBaseActivityDiagram::create(UmlItem * parent, const char * s)
UmlActivityFinalActivityNode * UmlBaseActivityFinalActivityNode::create(UmlItem * parent, const char * s)
UmlActivityObject * UmlBaseActivityObject::create(UmlItem * parent, const char * s)
UmlActivityParameter * UmlBaseActivityParameter::create(UmlActivity * parent, const char * s)
UmlActivityParameter * UmlBaseParameterSet::create(UmlActivityAction * parent, const char * s)
UmlActivityPartition * UmlBaseActivityPartition::create(UmlItem * parent, const char * s)
UmlActivityPin * UmlBaseActivityPin::create(UmlActivityAction * parent, const char * s)
UmlActivity * UmlBaseActivity::create(UmlClassView * parent, const char * s)
UmlAddVariableValueAction * UmlBaseAddVariableValueAction::create(UmlItem * parent, const char * s)
UmlArtifact * UmlBaseArtifact::create(UmlDeploymentView * parent, const char * s)
    UmlAttribute * add_attribute(const char * name, aVisibility v,
    UmlAttribute * add_enum_item(const char * name);
    UmlAttribute * get_attribute(const char *);
UmlAttribute * UmlBaseAttribute::create(UmlClass * parent, const char * s)
UmlAttribute * UmlClass::add_attribute(const char * name, aVisibility v,
UmlAttribute * UmlClass::add_enum_item(const char * name) {
UmlAttribute * UmlClass::get_attribute(const char * who) {
UmlBroadcastSignalAction * UmlBaseBroadcastSignalAction::create(UmlItem * parent, const char * s)
UmlCallBehaviorAction * UmlBaseCallBehaviorAction::create(UmlItem * parent, const char * s)
UmlCallOperationAction * UmlBaseCallOperationAction::create(UmlItem * parent, const char * s)
UmlClassDiagram * UmlBaseClassDiagram::create(UmlClassView * parent, const char * s)
UmlClassInstance * UmlBaseClassInstance::create(UmlItem * parent, const char * name, UmlClass * type)
				       UmlClass * type, const char * if_def,
UmlClass * UmlBaseClass::create(UmlItem * parent, const char * s)
UmlClassView * UmlBaseClassView::create(UmlPackage * parent, const char * s)
UmlClearVariableValueAction * UmlBaseClearVariableValueAction::create(UmlItem * parent, const char * s)
UmlCode activity_node_kind(const char * s)
UmlCode arrow_type(const char * s)
				      UmlCode c, const char * name)
				    UmlCode c, const char * name)
						  UmlCode c, const char * name);
						UmlCode c, const char * name);
    UmlCode get_kind(const char *& p);
UmlCode pseudo_state_kind(const char * s)
UmlCode relation_type(const char * s, bool simple_relation)
UmlCode ToolCom::get_kind(const char *& p) {
UmlCollaborationDiagram * UmlBaseCollaborationDiagram::create(UmlItem * parent, const char * s)
UmlColor color(const char * s)
UmlComponentDiagram * UmlBaseComponentDiagram::create(UmlComponentView * parent, const char * s)
UmlComponent * UmlBaseComponent::create(UmlComponentView * parent, const char * s)
UmlComponentView * UmlBaseComponentView::create(UmlPackage * parent, const char * s)
  UmlCom::send_cmd(_identifier, saveInCmd, (const char *)s);
  UmlCom::send_cmd(miscGlobalCmd, loadCmd, (const char *) p);
		"  UmlCom::send_cmd(miscGlobalCmd, loadCmd, (const char *) p);\n",
UmlCreateObjectAction * UmlBaseCreateObjectAction::create(UmlItem * parent, const char * s)
UmlDecisionActivityNode * UmlBaseDecisionActivityNode::create(UmlItem * parent, const char * s)
UmlDeploymentDiagram * UmlBaseDeploymentDiagram::create(UmlDeploymentView * parent, const char * s)
UmlDeploymentView * UmlBaseDeploymentView::create(UmlPackage * parent, const char * s)
UmlDestroyObjectAction * UmlBaseDestroyObjectAction::create(UmlItem * parent, const char * s)
    UmlDrag(BrowserNode * bn, QWidget * parent = 0, const char * name = 0);
UmlDrag::UmlDrag(BrowserNode * bn, QWidget * parent, const char * name)
UmlEntryPointPseudoState * UmlBaseEntryPointPseudoState::create(UmlItem * parent, const char * s)
UmlExitPointPseudoState * UmlBaseExitPointPseudoState::create(UmlItem * parent, const char * s)
UmlExpansionKind expansion_mode_kind(const char * s)
UmlExpansionNode * UmlBaseExpansionNode::create(UmlExpansionRegion * parent, const char * s)
UmlExpansionRegion * UmlBaseExpansionRegion::create(UmlItem * parent, const char * s)
UmlExtraClassMember * UmlBaseExtraClassMember::create(UmlClass * parent, const char * name)
UmlFlowFinalActivityNode * UmlBaseFlowFinalActivityNode::create(UmlItem * parent, const char * s)
UmlFont font(const char * s)
UmlForkActivityNode * UmlBaseForkActivityNode::create(UmlItem * parent, const char * s)
UmlInitialActivityNode * UmlBaseInitialActivityNode::create(UmlItem * parent, const char * s)
UmlInterruptibleActivityRegion * UmlBaseInterruptibleActivityRegion::create(UmlItem * parent, const char * s)
    UmlItem * create_(anItemKind k, const char * s);
UmlItem * UmlBaseItem::create_(anItemKind k, const char * s) {
UmlJoinActivityNode * UmlBaseJoinActivityNode::create(UmlItem * parent, const char * s)
UmlMergeActivityNode * UmlBaseMergeActivityNode::create(UmlItem * parent, const char * s)
		     UmlMessageKind k, const char * m,
			   UmlMessageKind k, const char * m,
UmlNode * UmlBaseNode::create(UmlItem * parent, const char * s)
UmlObjectDiagram * UmlBaseObjectDiagram::create(UmlItem * parent, const char * s)
UmlOpaqueAction * UmlBaseOpaqueAction::create(UmlItem * parent, const char * s)
    UmlOperation * add_destr(aVisibility, const char * comment = 0);
    UmlOperation * add_op(const char * name, aVisibility, 
    UmlOperation * get_operation(const char *);
      UmlOperation::skip_expr(*((const char *) s) == '{');
UmlOperation * UmlBaseOperation::create(UmlClass * parent, const char * s)
UmlOperation * UmlClass::add_destr(aVisibility v, const char * comment) {
UmlOperation * UmlClass::add_op(const char * name, aVisibility v,
UmlOperation * UmlClass::get_operation(const char * who) {
UmlOrderingKind ordering(const char * s)
UmlPackage * UmlBasePackage::create(UmlPackage * parent, const char * name)
UmlParamDirection direction(const char * s)
UmlParamEffect effect(const char * s)
UmlRaiseExceptionAction * UmlBaseRaiseExceptionAction::create(UmlItem * parent, const char * s)
UmlReadVariableValueAction * UmlBaseReadVariableValueAction::create(UmlItem * parent, const char * s)
UmlReduceAction * UmlBaseReduceAction::create(UmlItem * parent, const char * s)
UmlRegion * UmlBaseRegion::create(UmlState * parent, const char * s)
    UmlRelation * add_relation(aRelationKind k, const char * name,
    UmlRelation * add_vect_assoc(const char * name, aVisibility v, UmlClass * type,
    UmlRelation * get_relation(aRelationKind k, const char * = 0);
    UmlRelation * get_relation(const char * = 0);
UmlRelation * UmlClass::add_relation(aRelationKind k, const char * name,
UmlRelation * UmlClass::add_vect_assoc(const char * name, aVisibility v, UmlClass * type,
UmlRelation * UmlClass::get_relation(aRelationKind k, const char * who) {
UmlRelation * UmlClass::get_relation(const char * who) {
UmlRemoveVariableValueAction * UmlBaseRemoveVariableValueAction::create(UmlItem * parent, const char * s)
UmlReplyAction * UmlBaseReplyAction::create(UmlItem * parent, const char * s)
UmlSendObjectAction * UmlBaseSendObjectAction::create(UmlItem * parent, const char * s)
UmlSendSignalAction * UmlBaseSendSignalAction::create(UmlItem * parent, const char * s)
UmlSequenceDiagram * UmlBaseSequenceDiagram::create(UmlItem * parent, const char * s)
UmlStateDiagram * UmlBaseStateDiagram::create(UmlState * parent, const char * s)
UmlState * UmlBaseState::create(UmlItem * parent, const char * s)
UmlTestIdentityAction * UmlBaseTestIdentityAction::create(UmlItem * parent, const char * s)
    UmlTypeSpec(const char * t) { explicit_type = t; }
	    UmlTypeSpec type, const char * cmd, const char * if_def, 
		       UmlTypeSpec type, const char * cmd, const char * if_def,
		    UmlTypeSpec type, const char * cmd, const char * if_def, 
		    UmlTypeSpec type, const char * cmd, const char * if_def, 
		 UmlTypeSpec type, const char * cmd, const char * if_def,
			   UmlTypeSpec type, const char * cmd, const char * if_def, 
			UmlTypeSpec type, const char * cmd, const char * if_def,
		UmlTypeSpec type, const char * cmd, const char * if_def,
				       UmlTypeSpec & type, const char * if_def,
	    UmlTypeSpec type, const char * if_def, const char * end_if, 
		       UmlTypeSpec type, const char * if_def, const char * end_if,
		    UmlTypeSpec type, const char * if_def, const char * end_if, 
			 UmlTypeSpec type, const char * if_def, const char * end_if, 
		UmlTypeSpec type, const char * if_def, const char * end_if,
UmlUnmarshallAction * UmlBaseUnmarshallAction::create(UmlItem * parent, const char * s)
UmlUseCaseDiagram * UmlBaseUseCaseDiagram::create(UmlItem * parent, const char * s)
UmlUseCase * UmlBaseUseCase::create(UmlItem * parent, const char * s)
UmlUseCaseView * UmlBaseUseCaseView::create(UmlItem * parent, const char * s)
UmlValueSpecificationAction * UmlBaseValueSpecificationAction::create(UmlItem * parent, const char * s)
UmlVisibility visibility(const char * s)
UmlWriteVariableValueAction * UmlBaseWriteVariableValueAction::create(UmlItem * parent, const char * s)
		(((unsigned char *) buffer_in)[1] << 16) +
		(((unsigned char *) buffer_in)[2] << 8) +
		((unsigned char *) buffer_in)[3]);
            ((unsigned char *) p)[-1];
            (((unsigned char *) p)[-2] << 8) +
            (((unsigned char *) p)[-3] << 16) +
	((unsigned char *) p_buffer_in)[-1];
      (((unsigned char *) p_buffer_in)[-2] << 8) +
    (((unsigned char *) p_buffer_in)[-3] << 16) +
    unsigned get_unsigned(const char *& p);
			unsigned rank, const char * where)
unsigned ToolCom::get_unsigned(const char *& p)
  // upgrade *Settings
  upPixmap = new QPixmap((const char **) up_xpm);
  UpToDatePackageIcon = new QPixmap((const char **) uptodate_package_xpm);
  usecaseButton = new QPixmap((const char **) usecase_button);
  UseCaseDiagramIcon = new QPixmap((const char **) usecasediagram_xpm);
  UseCaseIcon = new QPixmap((const char **) usecase_xpm);
  UseCaseViewIcon = new QPixmap((const char **) usecases_xpm);
  UserPackageIcon = new QPixmap((const char **) user_package_xpm);
  VeryLightGrayPixmap = new QPixmap((const char **) verylightgray_xpm);
  VeryLightOrangePixmap = new QPixmap((const char **) verylightorange_xpm);
    virtual bool set_stereotype(const char *);
    virtual bool tool_cmd(ToolCom * com, const char * args,
    virtual bool tool_cmd(ToolCom * com, const char * args);
  virtual bool tool_cmd(ToolCom * com, const char * args);
  virtual BrowserNode * referenced(const char *&) const;
    virtual const char * constraint() const;
    virtual const char * get_comment() const;
    virtual const char * help_topic() const;
    virtual void read(char *, char * k);
    virtual void read(char *, char * k) = 0;
  virtual void read(char * & st, char * & k) = 0;
    virtual void set_comment(const char * c);
    virtual void set_name(const char * s);
    void * a;
  void * a;
void AcceptCallAction::read(char * & st, char * & k) {
void AcceptEventAction::read(char * & st, char * & k) {
void AccessVariableValueAction::read(char * & st, char * & k) {
void ActivityActionData::read(char * & st, char * & k) {
void ActivityData::read(char * & st, char * & k) {
void ActivityDiagramSettings::read(char * & st, char * & k) {
void ActivityDiagramView::read(char * st, char * k) {
void ActivityDrawingSettings::read(char * & st, char * & k) {
void ActivityObjectData::edit(const char * what, QStringList & st) {
void ActivityObjectData::read(char * & st, char * & k) {
void ActivityPartitionData::read(char * & st, char * & k) {
void add_constraint2(UmlClass * basecl, const char *afterop, const char * afterat)
    void add_friend(const char *);
  void add_import(const char *);
  void add_includes(const char *, bool h = TRUE);
    void add_kind(const char * k);
void add_read(UmlClass * cl, const char * opname)
void AddVariableValueAction::read(char * & st, char * & k) {
void ArtifactData::read(char * & st, char * & k) {
    void assign(const char *, int len);
void AttributeData::read(char * & st, char * & k) {
void AttributeData::set_idlcase(BrowserAttribute * a, const char * e) {
void AType::read(char * & st, const char * t, const char * ex) {
void AType::read(char * & st, const char * t, const char * ex, const char * k) {
void BasicData::read(char * & st, char * & k) {
    void browse(LineEdit * ed, QPushButton * button, const char * caption,
void BrowserActivityAction::read_stereotypes(char * & st, char * & k)
void BrowserActivityDiagram::read_stereotypes(char * & st, char * & k)
void BrowserActivityDiagram::set_name(const char * s) {
void BrowserActivityNode::read_stereotypes(char * & st, char * & k)
void BrowserActivityObject::read_stereotypes(char * & st, char * & k)
void BrowserActivityPartition::read_stereotypes(char * & st, char * & k)
void BrowserActivity::read_stereotypes(char * & st, char * & k)
void BrowserArtifact::read_stereotypes(char * & st, char * & k)
void BrowserAttribute::read_stereotypes(char * & st, char * & k)
void BrowserClassDiagram::read_stereotypes(char * & st, char * & k)
void BrowserClassDiagram::set_name(const char * s) {
void BrowserClass::read_stereotypes(char * & st, char * & k)
void BrowserClass::set_name(const char * s) {
void BrowserClassView::read_stereotypes(char * & st, char * & k)
void BrowserColDiagram::read_stereotypes(char * & st, char * & k)
void BrowserColDiagram::set_name(const char * s) {
void BrowserComponentDiagram::read_stereotypes(char * & st, char * & k)
void BrowserComponentDiagram::set_name(const char * s) {
void BrowserComponent::read_stereotypes(char * & st, char * & k)
void BrowserComponentView::read_stereotypes(char * & st, char * & k)
void BrowserDeploymentDiagram::read_stereotypes(char * & st, char * & k)
void BrowserDeploymentDiagram::set_name(const char * s) {
void BrowserDeploymentNode::read_stereotypes(char * & st, char * & k)
void BrowserDeploymentView::read_stereotypes(char * & st, char * & k)
void BrowserDiagram::read_stereotypes(char * & st, char * & k)
void BrowserExpansionNode::read_stereotypes(char * & st, char * & k)
void BrowserExpansionRegion::read_stereotypes(char * & st, char * & k)
void BrowserExtraMember::set_name(const char * s) {
void BrowserFlow::read_stereotypes(char * & st, char * & k)
void BrowserInterruptibleActivityRegion::read_stereotypes(char * & st, char * & k)
void BrowserNode::edit(const char * s, const QStringList & default_stereotypes) {
void BrowserNode::mark_menu(Q3PopupMenu & m, const char * s, int bias) const {
void BrowserNode::read(char * & st, char * & k, int id) {
void BrowserNode::set_comment(const char * c) {
void BrowserNode::set_name(const char * s) {
void BrowserNode::unconsistent_fixed(const char * what, BrowserNode * newone) {  
void BrowserNode::unconsistent_removed(const char * what, BrowserNode * newone) {
void BrowserObjectDiagram::read_stereotypes(char * & st, char * & k)
void BrowserObjectDiagram::set_name(const char * s) {
void BrowserOperation::read_stereotypes(char * & st, char * & k)
void BrowserPackage::read_session(char * & st, const char * k) {
void BrowserPackage::read_stereotypes(char * & st, char * & k)
void BrowserParameter::read_stereotypes(char * & st, char * & k)
void BrowserParameterSet::read_stereotypes(char * & st, char * & k)
void BrowserPin::read_stereotypes(char * & st, char * & k)
void BrowserPseudoState::read_stereotypes(char * & st, char * & k)
void BrowserRegion::read_stereotypes(char * & st, char * & k)
void BrowserRelation::set_comment(const char * c) {
void BrowserSeqDiagram::read_stereotypes(char * & st, char * & k)
void BrowserSeqDiagram::set_name(const char * s) {
void BrowserStateAction::read_stereotypes(char * & st, char * & k)
void BrowserStateDiagram::read_stereotypes(char * & st, char * & k)
void BrowserStateDiagram::set_name(const char * s) {
void BrowserState::read_stereotypes(char * & st, char * & k)
void BrowserUseCaseDiagram::read_stereotypes(char * & st, char * & k)
void BrowserUseCaseDiagram::set_name(const char * s) {
void BrowserUseCase::read_stereotypes(char * & st, char * & k)
void BrowserUseCaseView::read_stereotypes(char * & st, char * & k)
void CallBehaviorAction::read(char * & st, char * & k) {
void CallOperationAction::read(char * & st, char * & k) {
void ChangeVariableValueAction::read(char * & st, char * & k,
void ClassData::read(char * & st, char * & k) {
void ClassData::set_formalparam_name(int rank, const char * s) {
void ClassData::set_formalparam_type(int rank, const char * s) {
void ClassDiagramSettings::read(char * & st, char * & k) {
void ClassDiagramView::read(char * st, char * k) {
void ClassInstanceData::read_attributes(char *& st, char *& k) {
void ClassInstanceData::read(char * & st, char * & k) {
void ClassInstCanvas::read(char *& st, char *& k) {
void ClassSettings::read(char * & st, char * & k) {
void ColDiagramView::read(char * st, char * k) {
void CollaborationDiagramSettings::read(char * & st, char * & k) {
void ComponentData::read(char * & st, char * & k) {
void ComponentDiagramSettings::read(char * & st, char * & k) {
void ComponentDiagramView::read(char * st, char * k) {
void ComponentDrawingSettings::read(char * & st, char * & k) {
void conditional(Q3CString & s, const char * if_def, const char * end_if)
    void connect(const char *, QWidget *, const char *);
void CreateObjectAction::read(char * & st, char * & k) {
			       void * d, bool visit) {
			   void * d, bool visit) {
				void * d, bool visit) {
void defGetField_(UmlClass * base, const char * where, const char * oper,
void defGetPtr_(UmlClass * base, const char * where, const char * oper,
void defGet_(UmlClass * base, const char * where, const char * oper,
void defGetValue_(UmlClass * base, const char * where, const char * oper,
void defSetBoolBitField_(UmlClass * base, const char * where, const char * oper,
void defSetBool_(UmlClass * base, const char * where, const char * oper, 
void defSetEnum_(UmlClass * base, const char * where, const char * oper, 
void defSetField_(UmlClass * base, const char * where, const char * oper,
void defSetPtr_(UmlClass * base, const char * where, const char * oper,
void defSetRefType_(UmlClass * base, const char * where, const char * oper,
void defSet_(UmlClass * base, const char * where, const char * oper,
void delete_definition(int id, const char * ext)
void DeploymentDiagramSettings::read(char * & st, char * & k) {
void DeploymentDiagramView::read(char * st, char * k) {
void DestroyObjectAction::read(char * & st, char * & k) {
void DiagramCanvas::read_stereotype_property(char * & st, char *& k) {
void DiagramView::load(const char * pfix) {
void DiagramWindow::duplicate(int dest_id, const char * ext) const {
void DiagramWindow::save(const char * ext, QString & warning,
    void duplicate(int dest_id, const char * ext) const;
    void edit(const char *, const QStringList & default_stereotypes);
    void edit(const char * what, QStringList & st);
void edit(const QString & s, QString name, void * id, EditType k,
  void * elt;
void ExceptionData::read(char * & st, char * & k) {
void ExpansionRegionData::read(char * & st, char * & k) {
void ExtraMemberData::read(char * & st, char * & k) {
    void fatal_error(const char * msg);
void FlowDef::read(char * & st, char * & k, Q3CString lang)
void FlowDialog::init_tab(FlDialog & d, FlowDef & st, const char * lbl,
void FormalParamData::read(ToolCom * com, const char *& args) {
void FormalParamData::skip(ToolCom * com, const char *& args)
            (void) fputs((const char *) *it, fp);
    void generate_extends(const char *& sep, QTextStream & f,
    void generate_implements(const char *& sep, QTextStream & f,
    void generate_inherit(const char *& sep, QTextStream & f, 
    void generate_inherit(const char *& sep, QTextStream & f);
    void generate_inherit(const char *& sep, QTextStream & f_h, 
    void generate(QTextStream & f_h, const char *& sep1,
    void generate(QTextStream & f, Q3CString & s, const char *& sep) const;
    void generate_visibility(QTextStream & f, const char * parent_st);
void GenerationSettings::read(char * & st, char * & k)
void GenerationSettings::read_descriptions(char * & st, char * & k)
void GenerationSettings::read_dirs(char * & st, char * & k)
    void * get_id(const char *& p);
    void get_rels(BrowserClass *, Q3PtrList<RelationData> &, int * rev = 0) const;
    void get_type(AType & t, const char *& p);
void HaveKeyValueData::read(char * & st, char * & k) {
void HaveKeyValueData::remove_key_value(const char * k) {
void HaveKeyValueData::set_key(int rank, const char * k) {
void HaveKeyValueData::set_value(const char * k, const char * v) {
void HaveKeyValueData::set_value(int rank, const char * v) {
    void * _identifier;
  void * id = UmlCom::read_id();
void InfoData::read(char * & st, char * & k, const char * s1, const char * s2) {
void InfoData::save(QTextStream & st, const char * s1, const char * s2) const {
    void init_cpp(Q3TabDialog *, ActivityActionData *, void * d, bool visit);
    void init_java(Q3TabDialog *, ActivityActionData *, void * d, bool visit);
    void init(Q3TabDialog *, ActivityActionData *, void * d, bool visit);
    void init_tab(CondDialog &, InfoData & cond, const char * lbl, bool enabled);
    void init_tab(FlDialog &, FlowDef & fdef, const char * lbl,
    void init_tab(QWidget *&, StDialog &, StateBehavior & td, const char * lbl,
    void init_tab(QWidget *& tab, MultiLineEdit *& ed, const char * v,
    void init_tab(QWidget *&, TransDialog &, TransDef & td, const char * lbl,
    void init_tab(QWidget *& w, MultiLineEdit *& ed, const char * v,
void KeyValueData::set_key(const char * s) {
void KeyValueData::set_value(const char * s) {
void KeyValuesTable::remove(const char * key) {
  void * k = (void *) scaled_w;
void Lex::error_near(Q3CString s, const char * m)
void Lex::unread_word(const char * s)
    void load(const char *);
    void load(int argc, char ** argv);
void * load_ptr(QBuffer & b)
    void manage_alias(const char *& p, QTextStream & ts,
    void manage_alias(const char *& p, QTextStream & ts);
    void manage_comment(const char *& p, const char *& pp);
    void manage_comment(const char *& p, const char *& pp, bool javadoc);
    void manage_description(const char *& p, const char *& pp);    
    void manage_description(const char *& p, const char *& pp);  
    void manage_docstring(const char *& p, const char *& pp, BooL & indent_needed,
void manage_python_docstring(QString comment, const char *& p, const char *& pp,
    void mark_menu(Q3PopupMenu & m, const char *, int bias) const;
void memo_idmax_loc(int & idmaxref, const char * who)
    void move_after(anItemKind k, const char * name);
void MyStr::assign(const char * s, int len) {
void ObjectData::read(char * & st, char * & k) { 
void ObjectDiagramSettings::read(char * & st, char * & k) {
void ObjectDiagramView::read(char * st, char * k) {
void oneBit(UmlClass * cl, Q3CString attname, const char * opname,
void OpaqueAction::read(char * & st, char * & k) {
void OperationData::read(char * & st, char * & k) {
void OperationData::set_param_default_value(int rank, const char * str) {
void OperationData::set_param_name(int rank, const char * str) {
void PackageData::read(char * & st, char * & k) {
void ParamData::read(char * & st, char * & k) {
void ParamData::set_default_value(const char * str) {
void ParamData::set_name(const char * s) {
void ParameterData::read(char * & st, char * & k) {
void ParameterDialog::init_tab(QWidget *& tab, MultiLineEdit *& ed, const char * v,
void ParameterSetData::read(char * & st, char * & k) {
void PinData::read(char * & st, char * & k) {
void PinDialog::init_tab(QWidget *& tab, MultiLineEdit *& ed, const char * v,
void PinParamData::read(char * & st, char * & k) {
void PseudoStateData::read(char * & st, char * & k) {
  void * ptr;
void RaiseExceptionAction::read(char * &, char * &) {
    void read_attributes(char *& st, char *& k);
    void read(char * &, char * &);
  void read(char * &, char * &);
    void read(char * &, char * & k);
    void read(char * &, char * & k, int id);
    void read(char * & st, char * & k);
    void read(char *& st, char *& k);
  void read(char * & st, char * & k);
  void read(char * & st, char * & k, const char * lang);
  void read(char * & st, char * & k, const char * s1, const char * s2);
  void read(char * & st, char * & k, const char * str);
  void read(char * & st, char * & k, Q3CString lang);
    void read(char * & st, const char * k);
    void read(char * & st, const char * t, const char * ex);
    void read(char * & st, const char * t, const char * ex, const char * k);
void read_color(char *& st, const char * key, UmlColor & c, char * & k)
  void read(const char * key, char * & st, char * & k);
void read_font(char *& st, const char * key, UmlFont & f, char * & k)
    void read_session(char * &, const char * k);
    void read_stereotype_property(char * & st, char *& k);
void read_string_list(QStringList & list, char * & st)
    void read(ToolCom * com, const char *& args);
void read_unicode_string_list(QStringList & list, char * & st)
  void receive_def(const char * args);
void ReduceAction::read(char * & st, char * & k) {
    void remove(const char * key);
    void remove_key_value(const char * k);
void RemoveVariableValueAction::read(char * & st, char * & k) {
void ReplyAction::read(char * & st, char * & k) {
void ReverseRoundtripFilter::read(const char * key, char * & st, char * & k) {
void ReverseRoundtripFilter::receive_def(const char * args) {
void ReverseRoundtripFilter::save(const char * key, QTextStream & st) { //[lgfreitas] we are not using the new qtextstream yet
void save_color(QTextStream & st, const char * s, UmlColor c, BooL & nl)
    void save(const char * ext, QString & warning, BooL & is_new) const;
  void save(const char * key, QTextStream & st); //[lgfreitas] we are using QTextStream
void save_definition(int id, const char * ext, const char * def,
void save_if_needed(const char * filename, const char * newdef)
void save_ptr(const void * ptr, QBuffer & b)
  void save(QTextStream &, const char * lang) const;
  void save(QTextStream & st, const char * lang) const;
  void save(QTextStream & st, const char * s1, const char * s2) const;
  void save(QTextStream & st, QString & warning, const char * str) const;
void save_string(const char * p, QTextStream & st)
void save_xy(QTextStream & st, const Q3CanvasItem * c, const char * s) {
void save_xyz(QTextStream & st, const Q3CanvasItem * c, const char * s) {
void save_xyzwh(QTextStream & st, const Q3CanvasRectangle * c, const char * s) {
void SdObjCanvas::read(char * & st, const char * k) {
void SendObjectAction::read(char * &, char * &) {
void SendSignalAction::read(char * & st, char * & k) {
void SeqDiagramView::read(char * st, char * k) {
void SequenceDiagramSettings::read(char * & st, char * & k) {
    void  set_comment_a(const char * s) { a.comment = s; }
    void set_comment_b(const char * s) { b.comment = s; }
    void set(const char * u, const char * c, const char * j,
    void set(const char * u, const char * c, const char * j, const char * i);
    void  set_constraint_a(const char * s) { a.constraint = s; }
    void set_constraint_b(const char * s) { b.constraint = s; }
    void set_cpp(const char * return_form_or_inherit,
    void set_default_value(const char * s);
    void set_description(const char * p);
    void set_formalparam_default_value(int, BrowserClass * t, const char * e);
    void set_formalparam_extends(int, BrowserClass * t, const char * e);
    void set_formalparam_name(int, const char *);
    void set_formalparam_type(int, const char *);
    void set_idlcase(BrowserAttribute * a, const char * e);
    void set_idlcase(RoleData & role, BrowserAttribute * a, const char * e);
    void set_java(const char * return_form, const char * params,
    void set_key(const char *);
    void set_key(int rank, const char * k);
    void set_name(const char *);
    void set_name(const char * s) { name = s; };
    void set_param_default_value(int rank, const char * s);
    void set_param_name(int rank, const char * s);
    void set(QString n, char * s) {
    void set_type(const char * s) { type = s; };
    void set_value(const char *);
    void set_value(const char * k, const char * v);
    void set_value(int rank, const char * v);
void SimpleClassDiagramSettings::read(char * & st, char * & k) {
    void skip_type(const char *& p);
    void * state;
void StateActionData::read(char * & st, char * & k) {
void StateBehavior::read(char * & st, char * & k, const char * lang) {
void StateBehavior::save(QTextStream & st, const char * lang) const {
void StateData::read(char * & st, char * & k) {
void StateDiagramSettings::read(char * & st, char * & k) {
void StateDiagramView::read(char * st, char * k) {
void StateDrawingSettings::read(char * & st, char * & k) {
void SynchroWindow::load(int argc, char ** argv) {
void TestIdentityAction::read(char * &, char * &) {
void ToolCom::fatal_error(const char *
void * ToolCom::get_id(const char *& p)
void ToolCom::get_type(AType & t, const char *& p)
void ToolCom::skip_type(const char *& p)
void ToolCom::write_id(BrowserNode * bn, char k, const char * s)
void ToolCom::write_string(const char * p)
void Tool::read(char * & st, char * & k)
void Tool::read(char * & st, char * & k, bool new_format)
void TraceDialog::add(const char * s) {
void TransDef::read(char * & st, char * & k, const char * lang)
void TransDef::save(QTextStream & st, const char * lang) const {
void UmlArtifact::add_import(const char * i) {
void UmlArtifact::add_includes(const char * i, bool h) {
void UmlClass::add_friend(const char * scl) {
void UmlClass::add_kind(const char * k) {
void UmlClassMember::generate_visibility(QTextStream & f, const char * parent_st) {
void UmlCom::message(const char * s)
void * UmlCom::read_id()
void UmlCom::send_cmd(CmdFamily f, unsigned int cmd, bool b, const char * s, const char * v)
void UmlCom::send_cmd(CmdFamily f, unsigned int cmd, const char * s)
void UmlCom::send_cmd(CmdFamily f, unsigned int cmd, const char * s, bool b)
void UmlCom::send_cmd(CmdFamily f, unsigned int cmd, const char * s, const char * v)
void UmlCom::send_cmd(CmdFamily f, unsigned int cmd, int arg, const char *)
void UmlCom::send_cmd(CmdFamily f, unsigned int cmd, void * id)
void UmlCom::send_cmd(CmdFamily f, unsigned int cmd, void * id, const char * n)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, anItemKind arg1, aRelationKind arg2, const void * id2)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, anItemKind arg1, const char * arg2)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, anItemKind arg, const void * id2)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, char arg)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, const char * arg)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, const char * arg1, const char * arg2)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, const Q3PtrVector<UmlClass> & l1, const Q3PtrVector<UmlClass> & l2, const Q3PtrVector<UmlClass> & l3)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, const Q3PtrVector<UmlItem> & l)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, const UmlTypeSpec & arg)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, const void * id1)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, const void * id1, const char * arg2)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, unsigned int arg)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, unsigned int arg1, char arg2, const char * arg3, const char * arg4, const UmlTypeSpec & arg5)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, unsigned int arg1, const char * arg2, const char * arg3, const UmlTypeSpec & arg4, const UmlTypeSpec & arg5)
void UmlCom::send_cmd(const void * id, OnInstanceCmd cmd, unsigned int arg1, const UmlTypeSpec & arg2)
void UmlCom::trace(const char * s)
void UmlCom::write_id(const void * id)
void UmlCom::write_string(const char * p)
void UmlFormalParameter::generate(QTextStream & f_h, const char *& sep1,
void UmlFormalParameter::generate(QTextStream & f, Q3CString & s, const char *& sep) const {
void UmlItem::manage_alias(const char *& p, QTextStream & ts,
void UmlItem::manage_alias(const char *& p, QTextStream & ts) {
void UmlItem::manage_comment(const char *& p, const char *& pp,
void UmlItem::manage_comment(const char *& p, const char *& pp) {
void UmlItem::manage_description(const char *& p, const char *& pp) {
void UmlItem::manage_docstring(const char *& p, const char *& pp, BooL & indent_needed,
void UmlItem::move_after(anItemKind k, const char * name) {
void UmlOperation::read_bodies(const char * h_path, const char * src_path)
void UmlOperation::read_bodies(const char * path)
void UmlOperation::roundtrip(const char * path, aLanguage who)
void UmlOperation::set_cpp(const char * return_form_or_inherit,
void UmlOperation::set_java(const char * return_form,
void UmlRelation::generate_extends(const char *& sep, QTextStream & f,
void UmlRelation::generate_implements(const char *& sep, QTextStream & f,
void UmlRelation::generate_inherit(const char *& sep, QTextStream & f, 
void UmlRelation::generate_inherit(const char *& sep, QTextStream & f) {
void UmlRelation::generate_inherit(const char *& sep, QTextStream & f_h, 
    void unconsistent_fixed(const char * what, BrowserNode * newone);
    void unconsistent_removed(const char * what, BrowserNode * newone);
void unknown_keyword(const char * k)
void unknown_ref(const char * kind, int id)
void UnmarshallAction::read(char * &, char * &) {
void unread_keyword(char * keyword, char * & st)
void update_api_version(const char * v)
void UseCaseData::read(char * & st, char * & k) {
void UseCaseDiagramSettings::read(char * & st, char * & k) {
void UseCaseDiagramView::read(char * st, char * k) {
void ValueSpecificationAction::read(char * & st, char * & k) {
void VisibilityGroup::connect(const char * sig, QWidget * w, const char * slt) {
void will_change_id(IdDict<void> & d, int & id, void * x)
    void write_id(BrowserNode * bn, char kind, const char * name);
    void write_string(const char * p);
void wrong_keyword(const char * k, const char * expected)
	    // warning : do NOT use bool * to access inside t2.applicable
      while ((fp = fopen((const char *) path, "wb")) == 0)
    while ((fp = fopen((const char *) s, "wb")) == 0)
  WhitePixmap = new QPixmap((const char **) white_xpm);
  YellowPixmap = new QPixmap((const char **) yellow_xpm);
  YoungPackageIcon = new QPixmap((const char **) young_package_xpm);
  zoom *= 0.98 * div;
