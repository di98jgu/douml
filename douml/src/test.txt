    a = (ArrowCanvas *) ((ArrowPointCanvas *) a->begin)->get_other(a);
	a = (AssocContainCanvas *) ((ArrowPointCanvas *) a->begin)->get_other(a);
	  a = (AssocContainCanvas *) ((ArrowPointCanvas *) a->end)->get_other(a);
	  a = (BrowserAttribute *) 
      a = (BrowserAttribute *) a->duplicate(anItemKind, "anArtifact");
    a = (CodLinkCanvas *) ((ArrowPointCanvas *) a->begin)->get_other(a);
    a = (CodLinkCanvas *) ((ArrowPointCanvas *) a->end)->get_other(a);
      act = (BrowserNode *) act->parent();
  ActivityActionCanvas * x = (ActivityActionCanvas *) it.current();
    ActivityActionData * data = (ActivityActionData *) browser_node->get_data();
  ActivityActionData * data = (ActivityActionData *) browser_node->get_data();
  ActivityCanvas * x = (ActivityCanvas *) it.current();
    ActivityData * data = (ActivityData *) browser_node->get_data();
  ActivityObjectCanvas * x = (ActivityObjectCanvas *) it.current();
    ActivityObjectData * data = (ActivityObjectData *) browser_node->get_data();
  ActivityObjectData * data = (ActivityObjectData *) browser_node->get_data();
  ActivityPartitionCanvas * x = (ActivityPartitionCanvas *) it.current();
	      "  _actor = (UmlClass *) UmlBaseItem::read_();\n"
	a = (FlowCanvas *) ((ArrowPointCanvas *) a->begin)->get_other(a);
	  a = (FlowCanvas *) ((ArrowPointCanvas *) a->end)->get_other(a);
      a = (ObjectLinkCanvas *) ((ArrowPointCanvas *) a->begin)->get_other(a);
	  a = (ObjectLinkCanvas *) ((ArrowPointCanvas *) a->begin)->get_other(a);
	    a = (ObjectLinkCanvas *) ((ArrowPointCanvas *) a->end)->get_other(a);
	    ar = (ArrowCanvas *) *cit;
	a = (RelationCanvas *) ((ArrowPointCanvas *) a->begin)->get_other(a);
	  a = (RelationCanvas *) ((ArrowPointCanvas *) a->end)->get_other(a);
	  arrow = (ArrowCanvas *) *it;
	arrow = (ArrowCanvas *) *it;
	ArrowCanvas * ar = (ArrowCanvas *) *cit;
	    ArrowCanvas * ar = (ArrowCanvas *) *it;
      ArrowPointCanvas * ap1 = (ArrowPointCanvas *) first_segment->end;
      ArrowPointCanvas * ap2 = (ArrowPointCanvas *) last_segment->begin;
      ArrowPointCanvas * p = (ArrowPointCanvas *) ar->end;
  ArtifactCanvas * x = (ArtifactCanvas *) it.current();
	a = (SimpleRelationCanvas *) ((ArrowPointCanvas *) a->begin)->get_other(a);
	  a = (SimpleRelationCanvas *) ((ArrowPointCanvas *) a->end)->get_other(a);
  AssocContainCanvas * plabel = (AssocContainCanvas *) aplabel;
  AssocContainCanvas * pstereotype = (AssocContainCanvas *) apstereotype;
    AssocContainCanvas * r = (AssocContainCanvas *)
  _assoc_diagram = (UmlActivityDiagram *) UmlBaseItem::read_();
	      "  _assoc_diagram = (UmlActivityDiagram *) UmlBaseItem::read_();\n"
  _assoc_diagram = (UmlClassDiagram *) UmlBaseItem::read_();
  _assoc_diagram = (UmlComponentDiagram *) UmlBaseItem::read_();
  _assoc_diagram = (UmlDeploymentDiagram *) UmlBaseItem::read_();
  _assoc_diagram = (UmlDiagram *) UmlBaseItem::read_();
	      "  _assoc_diagram = (UmlDiagram *) UmlBaseItem::read_();\n"
  _assoc_diagram = (UmlObjectDiagram *) UmlBaseItem::read_();
	      "  _assoc_diagram = (UmlObjectDiagram *) UmlBaseItem::read_();\n"
  _assoc_diagram = (UmlStateDiagram *) UmlBaseItem::read_();
	      "  _assoc_diagram = (UmlStateDiagram *) UmlBaseItem::read_();\n"
  _assoc_diagram = (UmlUseCaseDiagram *) UmlBaseItem::read_();
  _association.type = (UmlClass *) UmlBaseItem::read_();
		   "  _association.type = (UmlClass *) UmlBaseItem::read_();\n"
  _assoc_view = (UmlDeploymentView *) UmlBaseItem::read_();
	a = (TransitionCanvas *) ((ArrowPointCanvas *) a->begin)->get_other(a);
	  a = (TransitionCanvas *) ((ArrowPointCanvas *) a->end)->get_other(a);
	 AttributeData * at = (AttributeData *) ((BrowserNode *) child)->get_data();
  AttributeData * d = (AttributeData *) at->get_data();
	AttributeData * d = (AttributeData *) ((BrowserNode *) child)->get_data();
    _base_type.type = (UmlClass *) UmlBaseItem::read_();
    bn = (BrowserNode *) artifactArtifact->parent();
    bn = (BrowserNode *) baseArtifactArtifact->parent();
       bn = (BrowserNode *) bn->nextSibling())
	     bn = (BrowserNode *) bn->nextSibling()) {
	   bn = (BrowserNode *) bn->nextSibling())
	 bn = (BrowserNode *) bn->nextSibling()) {
      bn = (BrowserNode *) bn->parent();
    bn = (BrowserNode *) bn->parent();
  bn = (BrowserNode *) bn->parent();
	  bn = (BrowserNode *) bn->parent();
	bn = (BrowserNode *) bn->parent();
    bn = (BrowserNode *) comArtifact->parent();
      bn = (BrowserNode *) settingsArtifact->parent();
    br = (BrowserNode *) br->parent();
  BrowserActivityAction * bn = (BrowserActivityAction *) act->browser_node;
  BrowserActivityDiagram * result = (BrowserActivityDiagram *) all[id];
  BrowserArtifact * bn = (BrowserArtifact *) data->get_browser_node();
      BrowserArtifact * c = (BrowserArtifact *)
	BrowserArtifact * c = (BrowserArtifact *) 
	  BrowserArtifact * cp = (BrowserArtifact *) com->get_id(args);
	  BrowserAttribute * at = (BrowserAttribute *) com->get_id(args);
      BrowserAttribute * bn = (BrowserAttribute *) add_attribute(0, rank == 8);
  BrowserClass * bn = (BrowserClass *) c->get_browser_node();
  BrowserClass * bn = (BrowserClass *) cl->get_browser_node();
  BrowserClass * cl = (BrowserClass *) bn->parent();
    BrowserClass * cl = (BrowserClass *) browser_node;
      BrowserClass * cl = (BrowserClass *) browser_node->parent();
  BrowserClass * cl = (BrowserClass *) browser_node->parent();
  BrowserClass * cl = (BrowserClass *) com->get_id(args);
  BrowserClass * cl = (BrowserClass *) get_type();
    BrowserClass * cl = (BrowserClass *) l.take(0);
  BrowserClass * cl = (BrowserClass *) nodes.at(i);
    BrowserClass * cl = (BrowserClass *) notyet.getFirst();
  BrowserClassDiagram * result = (BrowserClassDiagram *) all[id];
	      BrowserClass * end = (BrowserClass *) com->get_id(args);
  BrowserClassInstance * bn = (BrowserClassInstance *) inst->get_browser_node();
  BrowserClassInstance * other = (BrowserClassInstance *) com->get_id(args);
  BrowserClass * new_cl = (BrowserClass *) nodes.at(edtype->currentItem());
  BrowserClassView * bn = (BrowserClassView *) data->get_browser_node();
  BrowserComponent * bn = (BrowserComponent *) data->get_browser_node();
  BrowserComponent * bn = (BrowserComponent *) nd->get_browser_node();
    BrowserComponent * comp = (BrowserComponent *) browser_node;
  BrowserComponent * comp = (BrowserComponent *) browser_node;
	  BrowserComponent * cp = (BrowserComponent *) com->get_id(args);
      BrowserDiagram * bn = (BrowserDiagram *) get_it(k, read_id(st));
      BrowserNode * after = (BrowserNode *) com->get_id(args);
      BrowserNode * bn = (BrowserNode *) com->get_id(args);
                    BrowserNode * bn = (BrowserNode *) get_id(p);
    BrowserNode * bn = (BrowserNode *) it.currentKey();
      BrowserNode * bn = (BrowserNode *) selectedItem();
  BrowserNode * bn = (BrowserNode *) selectedItem();
      BrowserNode * br = (BrowserNode *) child;
      BrowserNode * ch = (BrowserNode *) child;
  BrowserNode * child = (BrowserNode *) cl->firstChild();
  BrowserNode * container = (BrowserNode *)
      BrowserNode * e = (BrowserNode *) it.current();
	      BrowserNode * end = (BrowserNode *) com->get_id(args);
	    BrowserNode * end = (BrowserNode *) com->get_id(args);
		  BrowserNode * end = (BrowserNode *) com->get_id(args);
    BrowserNode * gp = (BrowserNode *) bn->parent()->parent();
  BrowserNode * gp = (BrowserNode *) (bn->parent()->parent());
      BrowserNode * newparent = (BrowserNode *) com->get_id(args);
      BrowserNode * old_parent = (BrowserNode *) bn->parent();
  BrowserNode * old_parent = (BrowserNode *) bn->parent();
      BrowserNode * oldparent = (BrowserNode *) parent();
  BrowserNode * pack = (BrowserNode *) cl->parent()->parent();
  BrowserNode * parent = (BrowserNode *) browser_node->parent();
	    BrowserNode * parent = (BrowserNode *) di->get_bn()->parent();
  BrowserNode * parent = (BrowserNode *) elt->get_bn()->parent();
  BrowserNode * parent = (BrowserNode *) rel->parent();
  BrowserNode * p = (BrowserNode *) cln->get_bn()->parent();
      BrowserNode * p = (BrowserNode *) com->get_id(args);	// package
      BrowserNode * p = (BrowserNode *) parent();
    BrowserNode * p = (BrowserNode *) parent();
  BrowserNode * p = (BrowserNode *) parent();
      BrowserNode * p = (BrowserNode *) this;
  BrowserNode * p  = (BrowserNode *) this;
    BrowserNode * pf = (BrowserNode *) cl->parent()->parent();
  BrowserNode * pf = (BrowserNode *) cl->parent()->parent();
  BrowserNode * pf = (BrowserNode *) v->parent();
  BrowserNode * sel = (BrowserNode *) listView()->currentItem();
    BrowserOperation * br_op = (BrowserOperation *) oper->browser_node;
  BrowserPackage * bn = (BrowserPackage *) pa->browser_node;
  BrowserPackage * container = (BrowserPackage *) parent();
  BrowserPackage * p = (BrowserPackage *) com->get_id(args);
  BrowserPseudoState * bn = (BrowserPseudoState *) pst->browser_node;
	  BrowserPseudoState * st = (BrowserPseudoState *) com->get_id(args);
	    BrowserRelation * r = (BrowserRelation *) child;
  BrowserRelation * r = (BrowserRelation *) com->get_id(args);
    BrowserSeqDiagram * sd = (BrowserSeqDiagram *) window()->browser_diagram();
  BrowserStateDiagram * result = (BrowserStateDiagram *) all[id];
	  BrowserState * st = (BrowserState *) com->get_id(args);
	cc = (CdClassCanvas *) di;
  CdClassCanvas * x = (CdClassCanvas *) it.current();
    child = (BrowserNode *) child->nextSibling();
      ClassData * c = (ClassData *)
	  ClassData * c = (ClassData *) bn->get_data();
      ClassData * c = (ClassData *) (*it)->get_data();
    ClassData * cd = (ClassData *) c->get_data();
  ClassData * cd = (ClassData *) cl->get_data();
	ClassData * cl2 = (ClassData *) t.type->get_data();
	 ClassData * cl = (ClassData *) ((BrowserNode *) child)->get_data();
      ClassData * cld = (ClassData *) 
  ClassData * cld = (ClassData *) 
	  ClassData * cld = (ClassData *) rel->get_end_class()->get_data();
    ClassData * d = (ClassData *) ((BrowserNode *) browser_node->parent())->get_data();
  ClassData * d = (ClassData *) cl->get_data();
  ClassData * end_data = (ClassData *) rel->get_end_class()->get_data();
  ClassData * start_data = (ClassData *) rel->get_start_class()->get_data();
  ClassInstanceData * data = (ClassInstanceData *) browser_node->get_data();
      ClassInstanceData * d = (ClassInstanceData *)
  ClassInstanceData * d = (ClassInstanceData *) browser_node->get_data();
    ClassInstanceData * od = (ClassInstanceData *) other->get_data();
	      "    _class = (UmlClass *) UmlBaseItem::read_();\n"
	classview = (UmlClassView *) *v;
      cl = (BrowserClass *) classes->at(index_cl);
      cl = (BrowserClass *) cl->parent();
	cl = (Class *) b;
	cl = (Class *) cl->parent();
    cl_container = (BrowserNode *) bn->parent();
      cl = (UmlClass *) cl->parent();
	cl = (UmlClass *) it.current()->parent();
    cl = (UmlClass *) parent();
  CodClassInstCanvas * x = (CodClassInstCanvas *) it.current();
  CodLinkCanvas * result = (CodLinkCanvas *) ArrowCanvas::join(other, ap);
  ComponentCanvas * x = (ComponentCanvas *) it.current();
  const ActivityData * data = (ActivityData *) browser_node->get_data();
  const ClassData * d = (ClassData *) cl->get_bn()->get_data();
  ConstraintCanvas * x = (ConstraintCanvas *) it.current();
  const StateData * data = (StateData *) browser_node->get_data();
    container_state = (BrowserNode *) parent->parent();
	  cp = (UmlArtifact *) children[index];
  _default_value.type = (UmlClass *) UmlBaseItem::read_();
		   "  _default_value.type = (UmlClass *) UmlBaseItem::read_();\n"
  DeploymentNodeCanvas * x = (DeploymentNodeCanvas *) it.current();
	deploymentview = (UmlDeploymentView *) *v;
	  dep = (UmlRelation *) *v;
    d = (FlowData *) begin->add_relation(UmlFlow, cnend);
	    (diag != (BrowserNode *) the_canvas()->browser_diagram()))
        DiagramWindow * w = (DiagramWindow *) the->ws->windowList().at(0);
  dirs = (CodDirsCanvas *) load_item(b);
    d = (RelationData *) begin->add_relation(type(), cnend);
    d = (SimpleRelationData *) begin->add_relation(type(), cnend);
    d = (TransitionData *) begin->add_relation(UmlTransition, cnend);
		  end = (BrowserNode *) com->get_id(args);
      end = new BrowserRelation((md->get_end_class() == (BrowserClass *) model->parent())
      end_removed_from = (md->end_removed_from == (BrowserClass *) model->parent())
	  _enum_pattern_decl = (UmlAttribute *) ch[i];
	  _enum_pattern_item_case = (UmlAttribute *) ch[i];
    exception.type = (UmlClass *) UmlBaseItem::read_();
  ExpansionNodeCanvas * x = (ExpansionNodeCanvas *) it.current();
  ExpansionRegionCanvas * x = (ExpansionRegionCanvas *) it.current();
  _extends.type = (UmlClass *) UmlBaseItem::read_();
		   "  _extends.type = (UmlClass *) UmlBaseItem::read_();\n"
	ExtraMemberData * d = (ExtraMemberData *) ((BrowserNode *) child)->get_data();
	 ExtraMemberData * emd = (ExtraMemberData *) ((BrowserNode *) child)->get_data();
      ex = (UmlExtraClassMember *) ch[i];
  FlowCanvas * x = (FlowCanvas *) it.current();
  FlowData * def = (FlowData *) bn->get_data();
    FlowData * tr = (FlowData *) br->get_data();
  for (bn = (BrowserNode *) bn->firstChild();
	for (bn = (BrowserNode *) e->firstChild();
  for (bn = (BrowserNode *) pk->firstChild();
  for (bn = (BrowserNode *) t.type->firstChild();
      for (bn = (BrowserNode *) v->firstChild();
  for (parent = (BrowserClass *) parents.first();
  for (v = (BrowserNode *) pk->firstChild();
      FragmentCanvas * f = (FragmentCanvas *) itref.currentKey();
  FragmentCanvas * x = (FragmentCanvas *) it.current();
  fragment = (FragmentCanvas *) ::load_item(b);
	      "  _fragment = (UmlFragment *) fragment;\n"
	      " _fragment = (UmlFragment *) fragment;\n"
  from = (CodObjCanvas *) a->begin;
	    get_of_attr = (AttributeData *) br->get_data();
	    get_of_rel = (RelationData *) br->get_data();
  _get_of = (UmlClassMember *) UmlBaseItem::read_();
  _get_oper = (UmlOperation *) UmlBaseItem::read_();
		   "  _get_oper = (UmlOperation *) UmlBaseItem::read_();\n"
  _idl_case = (UmlAttribute *) UmlBaseItem::read_();
  if ((bn = (BrowserNode *) bn->parent()) != 0)
    if (p == (BrowserNode *) st)
    if (p->label != 0) plabel = (ArrowCanvas *) p;
  if (p->label != 0) plabel = (ArrowCanvas *) p;
    if (p->stereotype != 0) pstereotype = (ArrowCanvas *) p;
  if (p->stereotype != 0) pstereotype = (ArrowCanvas *) p;
    if ((r = (BrowserActivityDiagram *) all[id]) == 0)
    if ((r = (BrowserActivityDiagram *) all[id = read_id(st)]) == 0)
    if ((r = (BrowserClassDiagram *) all[id]) == 0)
    if ((r = (BrowserClassDiagram *) all[id = read_id(st)]) == 0)
    if ((r = (BrowserColDiagram *) all[id]) == 0)
    if ((r = (BrowserColDiagram *) all[id = read_id(st)]) == 0)
    if ((r = (BrowserComponentDiagram *) all[id]) == 0)
    if ((r = (BrowserComponentDiagram *) all[id = read_id(st)]) == 0)
    if ((r = (BrowserDeploymentDiagram *) all[id]) == 0)
    if ((r = (BrowserDeploymentDiagram *) all[id = read_id(st)]) == 0)
    if ((r = (BrowserObjectDiagram *) all[id]) == 0)
    if ((r = (BrowserObjectDiagram *) all[id = read_id(st)]) == 0)
    if ((r = (BrowserSeqDiagram *) all[id]) == 0)
    if ((r = (BrowserSeqDiagram *) all[id = read_id(st)]) == 0)
    if ((r = (BrowserStateDiagram *) all[id]) == 0)
    if ((r = (BrowserStateDiagram *) all[id = read_id(st)]) == 0)
    if ((r = (BrowserUseCaseDiagram *) all[id]) == 0)
    if ((r = (BrowserUseCaseDiagram *) all[id = read_id(st)]) == 0)
    if ((st != 0) && (st->cl == (BrowserClass *) at->parent()))
  if ((st != 0) && (st->cl == (BrowserClass *) at->parent()))
  InfoCanvas * x = (InfoCanvas *) it.current();
	      "  _instance = (UmlClassInstance *) UmlBaseItem::read_();\n"
  InterruptibleActivityRegionCanvas * x = (InterruptibleActivityRegionCanvas *) it.current();
	 ->is(slot_rel, it.current()->get_start() == (DiagramItem *) this)))
  label = (LabelCanvas *) load_item(b);
      last = (ObjectLinkCanvas *) ((ArrowPointCanvas *) last->end)->get_other(last);
    last = (ObjectLinkCanvas *) ((ArrowPointCanvas *) last->end)->get_other(last);
	last = (ObjectLinkCanvas *) ((ArrowPointCanvas *) last->end)->get_other(last);
      last = (RelationCanvas *) ((ArrowPointCanvas *) last->end)->get_other(last);
  multiplicity_a = (LabelCanvas *) load_item(b);
  multiplicity_b = (LabelCanvas *) load_item(b);
	nd = (BrowserNode *) nd->parent();
  NoteCanvas * x = (NoteCanvas *) it.current();
  OdClassInstCanvas * x = (OdClassInstCanvas *) it.current();
	  op1->new_body("  _assoc_diagram = (UmlComponentDiagram *) UmlBaseItem::read_();\n\
	  op1 = (OperationData *) baseComponentAssociatedDiagram->get_data();
	  op1 = (OperationData *) baseComponentCreate->get_data();
	  op1 = (OperationData *) baseComponentKind->get_data();
	  op1 = (OperationData *) baseComponentRead_uml_->get_data();
	  op1 = (OperationData *) baseComponentSet_AssociatedDiagram->get_data();
	  op1 = (OperationData *) ((BrowserNode *) child)->get_data();
	op1 = (OperationData *) ((BrowserNode *) child)->get_data();
      op1 = (UmlOperation *) ch[i];
	  op2 = (OperationData *) baseComponentCreation->get_data();
	  op2 = (OperationData *) ((BrowserNode *) child)->get_data();
    operation = (BrowserOperation *) com->get_id(args);
	OperationData * data = (OperationData *)
    OperationData * d = (OperationData *) bn->get_data();
	OperationData * d = (OperationData *) bn->get_data();
      OperationData * d = (OperationData *) ((BrowserNode *) child)->get_data();
	OperationData * d = (OperationData *) ((BrowserNode *) child)->get_data();
    OperationData * d = (OperationData *) operation->get_data();
  OperationData * d = (OperationData *) op->get_data();
	OperationData * od = (OperationData *) bn->get_data();
	 OperationData * op = (OperationData *) ((BrowserNode *) child)->get_data();
  _operation = (UmlOperation *) UmlBaseItem::read_();
	      "  _operation = (UmlOperation *) UmlBaseItem::read_();\n",
	      "  _operation = (UmlOperation *) UmlBaseItem::read_();\n"
  op->set_CppBody("  _assoc_diagram = (UmlComponentDiagram *) UmlBaseItem::read_();\n"
  op->set_CppBody("  _assoc_diagram = (UmlDiagram *) UmlBaseItem::read_();\n"
      op = (UmlOperation *) ch[index];
  PackageCanvas * x = (PackageCanvas *) it.current();
    PackageData * pd = (PackageData *)
	    Package * pack = (Package *) cl->parent();
	  Package * pack = (Package *) cl->parent();
	Package * pack = (Package *) cl->parent();
    Package * pa = (Package *) parent();
    pack = (Package *) pack->parent();
  ParameterCanvas * x = (ParameterCanvas *) it.current();
  ParameterData * d = (ParameterData *) browser_node->get_data();
  ParameterSetCanvas * x = (ParameterSetCanvas *) it.current();
    param.type.type = (UmlClass *) UmlBaseItem::read_();
       parent = (BrowserClass *) parents.next())
	  parent = (BrowserNode *) window()->browser_diagram()->parent();
      p = (BrowserNode *) child;
	p = (BrowserNode *) parent();
    p = (BrowserNode *) p->parent();
  PinCanvas * x = (PinCanvas *) it.current();
  PinData * d = (PinData *) browser_node->get_data();
      PinParamData * model = (ParameterData *) (*iter)->get_data();
      plabel = (FlowCanvas *) aplabel;
      plabel = (ObjectLinkCanvas *) aplabel;
    plabel = (ObjectLinkCanvas *) aplabel;
      plabel = (RelationCanvas *) aplabel;
      plabel = (TransitionCanvas *) aplabel;
      p = (Package *) child;
    prj = (UmlPackage *) prj->parent();
      ps = (BrowserPseudoState *) pseudostates.at(index);
      pstereotype = (FlowCanvas *) apstereotype;
      pstereotype = (ObjectLinkCanvas *) apstereotype;
    pstereotype = (ObjectLinkCanvas *) apstereotype;
      pstereotype = (RelationCanvas *) apstereotype;
      pstereotype = (SimpleRelationCanvas *) apstereotype;
      pstereotype = (TransitionCanvas *) apstereotype;
    r = (BrowserPin *) pin->duplicate(future_parent, name);
      rc = (RelationCanvas *)
    rc = (RelationCanvas *)
	regions[--nregion] = (BrowserRegion *) child;
      RelationCanvas * r = (RelationCanvas *) *cit;
  RelationData * def = (RelationData *) bn->get_data();
  RelationData * md = (RelationData *) model->get_data();
	    RelationData * rd = (RelationData *)
	RelationData * rd = (RelationData *)
  RelationData * rd = (RelationData *) r->get_data();
	    RelationData * rd = (RelationData *) r->get_data();
      RelationData * rd = (RelationData *) slot_rel.rel;
      RelationData * rd = (RelationData *) variable->get_data();
	RelationData * rel = (RelationData *) ((BrowserNode *) child)->get_data();
	RelationData * re = (RelationData *) ((BrowserNode *) child)->get_data();
	RelationData * r = (RelationData *)
	RelationData * r = (RelationData *) ((BrowserNode *) child)->get_data();
    RelationData * r = (RelationData *) it.current()->get_data();
  rel = (BrowserRelation *) rel->duplicate(this);
    rel = (ObjectLinkCanvas *) ((ArrowPointCanvas *) rel->end)->get_other(rel);
    rel = (RelationCanvas *) ((ArrowPointCanvas *) rel->end)->get_other(rel);
	  rel = (UmlRelation *) x;
	represents = (BrowserNode *) com->get_id(args);
  _represents = (UmlItem *) UmlBaseItem::read_();
	      "  _represents = (UmlItem *) UmlBaseItem::read_();\n",
	return pack->class_view = (UmlClassView *) ch[index];
	return pack->classview = (UmlClassView *) ch[index];
	return pack->deployment_view = (UmlDeploymentView *) ch[index];
	return pack->deploymentview = (UmlDeploymentView *) ch[index];
  _return_type.type = (UmlClass *) UmlBaseItem::read_();
	return uml = (UmlPackage *) it;
  role_a = (LabelCanvas *) load_item(b);
  role_b = (LabelCanvas *) load_item(b);
  _role_type = (UmlClass *) UmlBaseItem::read_();
		   "  _role_type = (UmlClass *) UmlBaseItem::read_();\n"
  SdClassInstCanvas * x = (SdClassInstCanvas *) it.current();
  SdContinuationCanvas * x = (SdContinuationCanvas *) it.current();
      SdDurationCanvas * d = (SdDurationCanvas *) dest;
	SdDurationCanvas * d = (SdDurationCanvas *) dest;
      SdDurationCanvas * d = (SdDurationCanvas *) support;
  SdDurationCanvas * d = (SdDurationCanvas *) support;
  SdDurationCanvas * x = (SdDurationCanvas *) it.current();
      SdLifeLineCanvas * ll = (SdLifeLineCanvas *) it;
  SdMsgCanvas * x = (SdMsgCanvas *) it.current();
  SdSelfMsgCanvas * x = (SdSelfMsgCanvas *) it.current();
	  set_EnumPatternDecl = (UmlOperation *) ch[i];
	  set_EnumPatternItemCase = (UmlOperation *) ch[i];
	    set_of_attr = (AttributeData *) br->get_data();
	    set_of_rel = (RelationData *) br->get_data();
  _set_of = (UmlClassMember *) UmlBaseItem::read_();
  _set_oper = (UmlOperation *) UmlBaseItem::read_();
		   "  _set_oper = (UmlOperation *) UmlBaseItem::read_();\n");
  SimpleRelationData * def = (SimpleRelationData *) bn->get_data();
  SimpleRelationData * md = (SimpleRelationData *) model->get_data();
    SimpleRelationData * rd = (SimpleRelationData *) br->get_data();
  _specification = (UmlOperation *) UmlBaseItem::read_();
  s += "  _refer = (UmlDiagram *) UmlBaseItem::read_();\n"
  s += "  _specification = (UmlOperation *) UmlBaseItem::read_();\n";
    start = new BrowserRelation((md->get_start_class() == (BrowserClass *) model->parent())
  StateActionCanvas * x = (StateActionCanvas *) it.current();
	  StateCanvas * state = (StateCanvas *) di;
  StateCanvas * x = (StateCanvas *) it.current();
  stereotype = (LabelCanvas *) load_item(b);
  StereotypePropertiesCanvas * x = (StereotypePropertiesCanvas *) it.current();
  SubjectCanvas * x = (SubjectCanvas *) it.current();
  _superClass = (UmlClass *) UmlBaseItem::read_();	// cannot be 0
  support = (SdDurationSupport *) ::load_ptr(b);
  _switch_type.type = (UmlClass *) UmlBaseItem::read_();
	swt.type = (BrowserClass *) nodes.at(index);
  _target = (UmlActivityNode *) UmlBaseItem::read_();
	      "  _target = (UmlActivityNode *) UmlBaseItem::read_();\n"
      TextCanvas * tx = (TextCanvas *) di;
  to = (CodObjCanvas *) a->end;
      toplevel = (UmlClass *) p;
  TransitionCanvas * x = (TransitionCanvas *) it.current();
  TransitionData * def = (TransitionData *) bn->get_data();
  TransitionData * md = (TransitionData *) model->get_data();
    TransitionData * tr = (TransitionData *) br->get_data();
      t.type = (BrowserClass *) dest->get_bn();
    t.type = (BrowserClass *) get_id(p);
      t.type = (BrowserClass *) nodes.at(index);
	  t.type = (BrowserClass *) nodes.at(index);
	t.type = (BrowserClass *) nodes.at(rank);
      type.type = (BrowserClass *) a->parent();
  _type.type = (UmlClass *) UmlBaseItem::read_();
	      "  _type.type = (UmlClass *) UmlBaseItem::read_();\n"
  _type = (UmlClass *) UmlBaseItem::read_();
	      "  _type = (UmlClass *) UmlBaseItem::read_();\n",
  UcClassCanvas * x = (UcClassCanvas *) it.current();
  UcUseCaseCanvas * x = (UcUseCaseCanvas *) it.current();
      UmlArtifact * other_art = (UmlArtifact *) r->target();
	UmlAttribute * at = (UmlAttribute *) it;
    UmlAttribute * at = (UmlAttribute *) UmlBaseItem::read_();
	      "    UmlAttribute * at = (UmlAttribute *) UmlBaseItem::read_();\n"
  UmlBaseItem * old_parent = (UmlBaseItem *)parent();
    ((UmlBaseItem *) result)->_parent = (UmlItem *) this;
    UmlBaseRelation * other = (UmlBaseRelation *) UmlBaseItem::read_();
    UmlBaseRelation * other = (UmlBaseRelation *) UmlBaseItem::read_();\n\
  UmlCanvas * cnv = (UmlCanvas *) canvas();
      UmlClass * cl = (UmlClass *) children[index];
    UmlClass * cl = (UmlClass *) parent();
  UmlClassInstance * result = (UmlClassInstance *) UmlBaseItem::read_();
	      "  UmlClassInstance * result = (UmlClassInstance *) UmlBaseItem::read_();\n"
            UmlClassItem * it = (UmlClassItem *) ch[index];
	    UmlClassItem * it = (UmlClassItem *)ch[index];
	  UmlClassItem * it = (UmlClassItem *)ch[index];
  UmlClassView * base_class_view = (UmlClassView *) base_item->parent();
  UmlClassView * base_class_view = (UmlClassView *) uml_base_item->parent();
  UmlClassView * base_class_view = (UmlClassView *) umlsetting->parent();
  UmlClassView * user_class_view = (UmlClassView *) uml_item->parent();
  UmlClassView * user_class_view = (UmlClassView *) user_item->parent();
  UmlDeploymentView * base_depl_view = (UmlDeploymentView *)
  UmlDeploymentView * dv = (UmlDeploymentView *)
  UmlDeploymentView * user_depl_view = (UmlDeploymentView *)
      UmlExtraClassMember * x = (UmlExtraClassMember *) ch[i];
  UmlFlow * result = (UmlFlow *) UmlBaseItem::read_();
	      "  UmlFlow * result = (UmlFlow *) UmlBaseItem::read_();\n"
  UmlNcRelation * result = (UmlNcRelation *) UmlBaseItem::read_();
      UmlOperation * op = (UmlOperation *)
	  UmlOperation * op = (UmlOperation *) ch2[i2];
      UmlOperation * op = (UmlOperation *) ch[i];
    UmlOperation * op = (UmlOperation *) it.currentKey();
    UmlOperation * op = (UmlOperation *) UmlBaseItem::from_id((unsigned) id, anOperation);
  UmlPackage * apibase = (UmlPackage *) UmlClass::get("UmlBaseItem", 0)->parent()->parent();
  UmlPackage * apiuser = (UmlPackage *) UmlClass::get("UmlItem", 0)->parent()->parent();
    UmlPackage * pack = (UmlPackage *)
      UmlPackage * pack = (UmlPackage *) parent()->parent();
	UmlRelation * default_value = (UmlRelation *) ch[i];
	UmlRelation * old = (UmlRelation *) ch[i];
      UmlRelation * rel = (UmlRelation *) ch[i];
	UmlRelation * rel = (UmlRelation *) it;
  UmlRelation * result = (UmlRelation *) UmlBaseItem::read_();
    UmlRelation * r = (UmlRelation *) UmlBaseItem::read_();
	      "    UmlRelation * r = (UmlRelation *) UmlBaseItem::read_();\n"
  UmlTransition * result = (UmlTransition *) UmlBaseItem::read_();
	      "  UmlTransition * result = (UmlTransition *) UmlBaseItem::read_();\n"
	    uml = (UmlClass *) x;
	  uml = (UmlClass *) x;
	uml = (UmlClass *) x;
	uml = (UmlPackage *) it;
  UseCaseData * data = (UseCaseData *) browser_node->get_data();
	      "  _use_case = (UmlUseCaseReference *) useCases[(void *) UmlCom::read_unsigned()];\n"
	      "  _use_case = (UmlUseCase *) UmlBaseItem::read_();\n"
  _value.type = (UmlClass *) UmlBaseItem::read_();
       v = (BrowserNode *) v->nextSibling()) {
      view = (BrowserNode *) view->parent();
    view = (BrowserNode *) view->parent();
  void * k = (void *) scaled_w;
      (*v++)->_parent = (UmlItem *) this;
    (*v++)->_parent = (UmlItem *) this;
      while (!(b = (BrowserNode *) cl->parent())->isa_package())
	  x = (BrowserNode *) parent();
      z = (ObjectLinkCanvas *) ((ArrowPointCanvas *) z->end)->get_other(z);
